{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2019-2022 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. GNU General Public License 2.0 Copyright (C) 2022 Beru \"Stella\" Hinode on behalf of Bedirhan KURT. All Rights Reserved. GNU GENERAL PUBLIC LICENSE Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow. GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\". Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this when it starts in an interactive mode: Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker. <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Library General Public License instead of this License.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2019-2022 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. GNU General Public License 2.0 Copyright (C) 2022 Beru \"Stella\" Hinode on behalf of Bedirhan KURT. All Rights Reserved. GNU GENERAL PUBLIC LICENSE Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow. GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\". Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this when it starts in an interactive mode: Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker. <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Library General Public License instead of this License.","title":"License"},{"location":"changelog/","text":"Log Creation \u00b6 run following the command via git-bash and copy output to following content git log Course Notes Changelog \u00b6 commit d3943cd634238d61b79e2dad0686634e67a5eae4 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Tue Oct 18 00 :24:50 2022 +0300 docs: Nuke homeworks folder * No homeworks for this lecture. :D Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 3e59e11a4c7625dee90885a6b25bd26109a5fcf3 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Tue Oct 18 00 :23:46 2022 +0300 docs/license: Add notice for GPL 2 .0 * Sublicensed under that by Beru on behalf of me for additional code and design-wise. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit deb9791b215ca41c6c86e43ba1e5cb3efafa735b Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Tue Oct 18 00 :22:04 2022 +0300 docs/week-^: Remove color property for first slide * Looks gore, so let 's keep it at default black. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit f75f8916c01b4bd18376ded0cfe5663e6c3d0486 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 15:23:11 2022 +0300 docs: Purge out redundant files ``` INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: - index.tr.md - license.tr.md - changelog\\index.tr.md - resume\\index.en.md - resume\\index.tr.md - syllabus\\syllabus.en.md - syllabus\\syllabus.tr.md ``` Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 41f09cd4f645b94973b06e6c58537250c429a56a Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 15:17:10 2022 +0300 Remove Turkish language and some pages that might not be needed Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 2ec66092e241ce158c755a1e3076207bc89ea0b7 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 15:05:09 2022 +0300 docs: week-2: Initial changes Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit f9c81ed974eec4d9acd382b493f2137271ea7be7 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 12:37:14 2022 +0300 docs: week-1: Remove RTEU branding * That branding also includes the class name which is irrelevant with my course notes. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 789c1c18a02bde37141d0ebc5dadd614eb158e1d Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 12:04:26 2022 +0300 [REVERTME] docs: week-2: Replicate modifications for Week 1 material Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 2124ea28ba1ffddc0745f4afe5c4b467e0eb6fc6 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 12:02:54 2022 +0300 docs: week-1: Build English variant Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit fa6c9c9a122bd4482c374e6b58b01e33313d8b98 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 12:01:13 2022 +0300 [REVERTME] docs: week-1: Remove Turkish variants * Previous commit removed repeated build targets. That change would allow only first detected file, which is original, English variant, to be built. Remove Turkish variants to avoid mismatches between content and showing dummy one. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit ce42aeb5565df71c620c5b8f41022c9c1bc7e428 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 11:58:35 2022 +0300 [REVERTME] docs: week-1: build: Remove repeated build * I intend to build just English version for now. TODO: Translate this to Turkish and build both together in a wider time. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 1b62d433ee6f0816fffbe648fa075c5ed872cce8 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Fri Oct 14 19:37:04 2022 +0300 docs: week-1: Make my own modification and notes * Also regenerate the assets. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 9b0b7a6aa0ffdf99a696627b34e7a30c2980fae5 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Fri Oct 14 08:39:44 2022 +0300 mkdocs: Properly localize Turkish translation for \"Changelog\" * \"Ge\u00e7mi\u015f\" in Turkish means \"History\". However, \"changelog\" is rather meant to say \"version history\", which translates to Turkish as \"S\u00fcr\u00fcm Ge\u00e7mi\u015fi\" or something similar. Do the change accordingly. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 86b923afab173b7ea9048fe3c2126b0bde0d1584 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Thu Oct 13 15:31:43 2022 +0300 docs/images: Replace images with my own designs Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 2794d1d4c7bc1f221f6f64d68fae29798dc5c916 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Thu Oct 13 15:31:15 2022 +0300 Fix a little typo on mkdocs Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit ca47880146219d96979fa5408f3f43f91e04760d Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Thu Oct 13 13:21:30 2022 +0300 docs: Remove redundant resources * We removed definition of these in previous commit. We remove the actual resources to save some space now. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 1bccafe38f9a9fb2af2c84359fd54cf7239b56e3 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Thu Oct 13 13:01:52 2022 +0300 Update configuration to my own * Let' s begin with introduction to AOSP now, shall we? Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit fc7629e9de10c1d0d3f8b91892c3966dc34e2667 Author: U\u011fur CORUH <ugur.coruh.tr@gmail.com> Date: Thu Oct 13 06 :57:32 2022 +0300 Update README.md commit e816b9bdd7174b376e70e5ad0deb64625aaa2d64 Merge: a6918da 581c74b Author: U\u011fur CORUH <ugur.coruh.tr@gmail.com> Date: Thu Oct 13 06 :53:09 2022 +0300 Merge pull request #3 from windowz414/main Reduce external dependencies and run new cmd instances for external package managers commit 581c74b360ffa67146e11f0d87b7eeefb79c8ef1 Merge: 3ecdb54 a6918da Author: U\u011fur CORUH <ugur.coruh.tr@gmail.com> Date: Thu Oct 13 06 :52:59 2022 +0300 Merge branch 'main' into main commit a6918da222277db2c0d3d6f4e127d65b8f6b6deb Merge: c5871e7 53b2f9c Author: U\u011fur CORUH <ugur.coruh.tr@gmail.com> Date: Thu Oct 13 06 :47:17 2022 +0300 Merge pull request #1 from ahmetkayatr/main Fix Scoop installation commit 3ecdb5447189e0d32f24c51becdfc320a676763b Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Wed Oct 12 20 :31:25 2022 +0300 Take advantage of ` start ` to spawn new CMD windows to run package mgrs ( #2) * Since installing package managers require shell restart because they add themselves to PATH, we need to restart the shell or spawn new CMD window for each package installation process ( this also gives us availability to perform install tasks in parallel :D ) . Let 's take advantage of `start` in combo with `cmd` with `/C` switch to do this for us. * Commit 2 of 2, as an alternative to make the shell restart. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 12d5c560ef9de2ee35c694a82e1f5cb7667b5ac8 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Wed Oct 12 19:35:23 2022 +0300 Align script with a better codestyle and install Python from MS Store (#2) * This is because of a few reasons. * The user already installs latest updates to Windows and practically already has Windows 10 21H2+ installed on their machine (even if it' s legacy! ) so why bother trying to use deprecated old functions and software? * Along with latest updates, the user already installs latest UWP apps and so get the latest command line tools provided by UWP apps ( such as winget ) so we should already be able to use them. * Python on MS Store, which is what winget installs Python from, already downloads and installs latest version of Python from their official website so why install it from an external source that 's most probably not even using Python' s website as source? * Windows 10 1803 onwards already ship curl CMDline utility inbuilt so why overwrite it? * Why was the last pip-install separated from others? Align that and establish consistency. * Why do we need to change into the directory script was run from when we do literally nothing that changes its contents? Remove it. * Commit 1 of 2 , reducing dependencies on other package managers. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit e0c6f285541812628a2401c5638ba14a96808c06 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Wed Oct 12 18 :18:01 2022 +0300 Fix Scoop installation * Done by aligning installation command with newer one. Also fixed syntaxing for PowerShell. TODO: Also restart terminal after installing package managers. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 53b2f9c1717cbfd02946d386e6d1f121b6bc17a3 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Wed Oct 12 18 :18:01 2022 +0300 Fix Scoop installation * Done by aligning installation command with newer one. Also fixed syntaxing for PowerShell. TODO: Also restart terminal after installing package managers. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit c5871e7af099362bbe0db70e57a84c2fcfa3139e Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Wed Mar 9 23 :30:31 2022 +0300 yml fixed commit 080a0d82ebf352af234903625853d2836431cddf Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Wed Mar 9 23 :28:19 2022 +0300 video plugin added commit c68c4343e8627f5e40da97157f58b1a8ad6232d3 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Mon Mar 7 02 :42:27 2022 +0300 README.md updated for publish operation commit 4724b5d73ddaadee2e1c388c8c0bb625eac3d719 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Mon Mar 7 02 :33:03 2022 +0300 README.md updated for commit and push commit ecf4a3ebe9ac62632285a6ae64fe7a2afac46a5c Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Mon Mar 7 02 :32:01 2022 +0300 README.md updated commit a9431cbd6d80d4c69b1f446c9cea9f1fe6c18eaf Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Mon Mar 7 00 :32:49 2022 +0300 Turkish and English Support Added for Overall Content commit da9526a92f88e45aac7284971f6a3a5e401e4fa4 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Sun Mar 6 17 :25:08 2022 +0300 yaml file github repo names are updated commit 9ae43c746fcaaec5072fc818396d8a04a2532951 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Sun Mar 6 17 :22:33 2022 +0300 jar files added for plantuml.jar commit 0f7237169ab5be4cf7b1f55e1798272af421cd7f Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Sun Mar 6 17 :20:56 2022 +0300 multi language try commit 0e3474fbc089ea19d84879fc364c80e3d1bc0fc8 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Sun Mar 6 16 :50:51 2022 +0300 initial commit","title":"Changelog"},{"location":"changelog/#log-creation","text":"run following the command via git-bash and copy output to following content git log","title":"Log Creation"},{"location":"changelog/#course-notes-changelog","text":"commit d3943cd634238d61b79e2dad0686634e67a5eae4 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Tue Oct 18 00 :24:50 2022 +0300 docs: Nuke homeworks folder * No homeworks for this lecture. :D Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 3e59e11a4c7625dee90885a6b25bd26109a5fcf3 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Tue Oct 18 00 :23:46 2022 +0300 docs/license: Add notice for GPL 2 .0 * Sublicensed under that by Beru on behalf of me for additional code and design-wise. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit deb9791b215ca41c6c86e43ba1e5cb3efafa735b Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Tue Oct 18 00 :22:04 2022 +0300 docs/week-^: Remove color property for first slide * Looks gore, so let 's keep it at default black. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit f75f8916c01b4bd18376ded0cfe5663e6c3d0486 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 15:23:11 2022 +0300 docs: Purge out redundant files ``` INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: - index.tr.md - license.tr.md - changelog\\index.tr.md - resume\\index.en.md - resume\\index.tr.md - syllabus\\syllabus.en.md - syllabus\\syllabus.tr.md ``` Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 41f09cd4f645b94973b06e6c58537250c429a56a Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 15:17:10 2022 +0300 Remove Turkish language and some pages that might not be needed Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 2ec66092e241ce158c755a1e3076207bc89ea0b7 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 15:05:09 2022 +0300 docs: week-2: Initial changes Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit f9c81ed974eec4d9acd382b493f2137271ea7be7 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 12:37:14 2022 +0300 docs: week-1: Remove RTEU branding * That branding also includes the class name which is irrelevant with my course notes. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 789c1c18a02bde37141d0ebc5dadd614eb158e1d Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 12:04:26 2022 +0300 [REVERTME] docs: week-2: Replicate modifications for Week 1 material Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 2124ea28ba1ffddc0745f4afe5c4b467e0eb6fc6 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 12:02:54 2022 +0300 docs: week-1: Build English variant Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit fa6c9c9a122bd4482c374e6b58b01e33313d8b98 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 12:01:13 2022 +0300 [REVERTME] docs: week-1: Remove Turkish variants * Previous commit removed repeated build targets. That change would allow only first detected file, which is original, English variant, to be built. Remove Turkish variants to avoid mismatches between content and showing dummy one. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit ce42aeb5565df71c620c5b8f41022c9c1bc7e428 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Sun Oct 16 11:58:35 2022 +0300 [REVERTME] docs: week-1: build: Remove repeated build * I intend to build just English version for now. TODO: Translate this to Turkish and build both together in a wider time. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 1b62d433ee6f0816fffbe648fa075c5ed872cce8 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Fri Oct 14 19:37:04 2022 +0300 docs: week-1: Make my own modification and notes * Also regenerate the assets. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 9b0b7a6aa0ffdf99a696627b34e7a30c2980fae5 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Fri Oct 14 08:39:44 2022 +0300 mkdocs: Properly localize Turkish translation for \"Changelog\" * \"Ge\u00e7mi\u015f\" in Turkish means \"History\". However, \"changelog\" is rather meant to say \"version history\", which translates to Turkish as \"S\u00fcr\u00fcm Ge\u00e7mi\u015fi\" or something similar. Do the change accordingly. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 86b923afab173b7ea9048fe3c2126b0bde0d1584 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Thu Oct 13 15:31:43 2022 +0300 docs/images: Replace images with my own designs Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 2794d1d4c7bc1f221f6f64d68fae29798dc5c916 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Thu Oct 13 15:31:15 2022 +0300 Fix a little typo on mkdocs Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit ca47880146219d96979fa5408f3f43f91e04760d Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Thu Oct 13 13:21:30 2022 +0300 docs: Remove redundant resources * We removed definition of these in previous commit. We remove the actual resources to save some space now. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 1bccafe38f9a9fb2af2c84359fd54cf7239b56e3 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Thu Oct 13 13:01:52 2022 +0300 Update configuration to my own * Let' s begin with introduction to AOSP now, shall we? Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit fc7629e9de10c1d0d3f8b91892c3966dc34e2667 Author: U\u011fur CORUH <ugur.coruh.tr@gmail.com> Date: Thu Oct 13 06 :57:32 2022 +0300 Update README.md commit e816b9bdd7174b376e70e5ad0deb64625aaa2d64 Merge: a6918da 581c74b Author: U\u011fur CORUH <ugur.coruh.tr@gmail.com> Date: Thu Oct 13 06 :53:09 2022 +0300 Merge pull request #3 from windowz414/main Reduce external dependencies and run new cmd instances for external package managers commit 581c74b360ffa67146e11f0d87b7eeefb79c8ef1 Merge: 3ecdb54 a6918da Author: U\u011fur CORUH <ugur.coruh.tr@gmail.com> Date: Thu Oct 13 06 :52:59 2022 +0300 Merge branch 'main' into main commit a6918da222277db2c0d3d6f4e127d65b8f6b6deb Merge: c5871e7 53b2f9c Author: U\u011fur CORUH <ugur.coruh.tr@gmail.com> Date: Thu Oct 13 06 :47:17 2022 +0300 Merge pull request #1 from ahmetkayatr/main Fix Scoop installation commit 3ecdb5447189e0d32f24c51becdfc320a676763b Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Wed Oct 12 20 :31:25 2022 +0300 Take advantage of ` start ` to spawn new CMD windows to run package mgrs ( #2) * Since installing package managers require shell restart because they add themselves to PATH, we need to restart the shell or spawn new CMD window for each package installation process ( this also gives us availability to perform install tasks in parallel :D ) . Let 's take advantage of `start` in combo with `cmd` with `/C` switch to do this for us. * Commit 2 of 2, as an alternative to make the shell restart. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 12d5c560ef9de2ee35c694a82e1f5cb7667b5ac8 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Wed Oct 12 19:35:23 2022 +0300 Align script with a better codestyle and install Python from MS Store (#2) * This is because of a few reasons. * The user already installs latest updates to Windows and practically already has Windows 10 21H2+ installed on their machine (even if it' s legacy! ) so why bother trying to use deprecated old functions and software? * Along with latest updates, the user already installs latest UWP apps and so get the latest command line tools provided by UWP apps ( such as winget ) so we should already be able to use them. * Python on MS Store, which is what winget installs Python from, already downloads and installs latest version of Python from their official website so why install it from an external source that 's most probably not even using Python' s website as source? * Windows 10 1803 onwards already ship curl CMDline utility inbuilt so why overwrite it? * Why was the last pip-install separated from others? Align that and establish consistency. * Why do we need to change into the directory script was run from when we do literally nothing that changes its contents? Remove it. * Commit 1 of 2 , reducing dependencies on other package managers. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit e0c6f285541812628a2401c5638ba14a96808c06 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Wed Oct 12 18 :18:01 2022 +0300 Fix Scoop installation * Done by aligning installation command with newer one. Also fixed syntaxing for PowerShell. TODO: Also restart terminal after installing package managers. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit 53b2f9c1717cbfd02946d386e6d1f121b6bc17a3 Author: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> Date: Wed Oct 12 18 :18:01 2022 +0300 Fix Scoop installation * Done by aligning installation command with newer one. Also fixed syntaxing for PowerShell. TODO: Also restart terminal after installing package managers. Signed-off-by: Bedirhan KURT <bedirhan.kurt.trjp@gmail.com> commit c5871e7af099362bbe0db70e57a84c2fcfa3139e Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Wed Mar 9 23 :30:31 2022 +0300 yml fixed commit 080a0d82ebf352af234903625853d2836431cddf Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Wed Mar 9 23 :28:19 2022 +0300 video plugin added commit c68c4343e8627f5e40da97157f58b1a8ad6232d3 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Mon Mar 7 02 :42:27 2022 +0300 README.md updated for publish operation commit 4724b5d73ddaadee2e1c388c8c0bb625eac3d719 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Mon Mar 7 02 :33:03 2022 +0300 README.md updated for commit and push commit ecf4a3ebe9ac62632285a6ae64fe7a2afac46a5c Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Mon Mar 7 02 :32:01 2022 +0300 README.md updated commit a9431cbd6d80d4c69b1f446c9cea9f1fe6c18eaf Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Mon Mar 7 00 :32:49 2022 +0300 Turkish and English Support Added for Overall Content commit da9526a92f88e45aac7284971f6a3a5e401e4fa4 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Sun Mar 6 17 :25:08 2022 +0300 yaml file github repo names are updated commit 9ae43c746fcaaec5072fc818396d8a04a2532951 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Sun Mar 6 17 :22:33 2022 +0300 jar files added for plantuml.jar commit 0f7237169ab5be4cf7b1f55e1798272af421cd7f Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Sun Mar 6 17 :20:56 2022 +0300 multi language try commit 0e3474fbc089ea19d84879fc364c80e3d1bc0fc8 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Sun Mar 6 16 :50:51 2022 +0300 initial commit","title":"Course Notes Changelog"},{"location":"week-1/week-1/","text":"Introduction to AOSP \u00b6 Week-1 (AOSP Introduction and History) \u00b6 Android's Birth and Its Development Process \u00b6 Download DOC , SLIDE , PPTX Outline \u00b6 What is Android and what is it intended for AOSP's birth Custom ROMs and custom device development Android was originally made NOT by Google but an independent company What is Android? \u00b6 When it comes to AOSP, which stands for Android Open Source Project, there are lots of people getting confused by the term even including majority of Android users themselves. So it's required to explain what is Android first. Android is a mobile operating system developed by Google for various platforms such as smartphones, tablet PCs and even laptops. It not only kept itself up to date with today's world, but also is known to always have an open hole for development as per human requests constantly changing. Every few Android versions, Google comes with new design guidelines which are made to both look elegant and stay future-proof. Nowadays, hundreds of thousands of people have been contributing to Android world by either their unique software based on it, contributing to upstream source code, manufacturing their own device with a modified version of it or simply porting it to plenty of devices you would never expect to see! We have even seen Android running on a Nintendo Switch! History of Android \u00b6 Believe it or not, Android was originally intended to be made for digital cameras, developed by a now-acquired-by-Google Android Inc, an American tech company, started development in 2003. Before it could get its public release, it had lots of changes - It got acquired by Google, then rebased on the Linux kernel to be intended to be made for PCs as an OSS (Open Source Software) licensed under Apache 2.0 in 2004. In 2007, after 3 years since getting acquired and rebased by Google, Open Handset Alliance was found to make Android supported by even wider range of devices by providing the core features it now has such as installing 3 rd party apps, wireless networking, etc. In 2008, 1 year after foundation of O.H.A, T-Mobile got the chance to feature this brand new operating system with majority of Google apps built-in: Android 1.0, codenamed \"Astro Boy\". Throughout its development cycle, 4 minor releases (1.1~1.4) have been made in top of 1.0 without any codename changes. In early 2009 was the first ever Android version we most probably know getting released, also making a huge change on Android's codenaming style that we know today: Android 1.5 \"Cupcake\". This release gave the UI some refreshments and lots of optimizations for touch screens as well as the introduction of on-screen keyboard that's the core feature that a smartphone and tablet PC has to offer today. It also introduced 3 rd party widgets, which Apple surely still has a long way off for. After semi-annual development cycle over Android Cupcake came Android Donut, incrementing minor release to 1.6 and getting released in Fall 2009. This release included adaptation to newer set of technologies such as over-the-air adaptation for different screen sizes and CDMA (also known as 3G network) support. Keeping up the pace for development came the 2 nd major version of Android, 2.0 \"Eclair\". This release is the first one to include, hold your horses because this is also something Android first introduced as well, speech-based navigation! As you would drive on road, the navigation would navigate you through towards your destination. It was also packed with introduction of live wallpaper support and speech-to-text, also known as speech dictation, availability. One downside though, it's also the first Android version to get a feature from iOS which made Apple extremely angry: Pinch to zoom. The next minor version, 2.1, didn't increment the codename but only was packed with some platform fixes. Just after 4 months since 2.1 came 2.2, incrementing codename to \"Froyo\". This release included huge amounts of performance improvements as well as standardizing some features such as the well-known dock and speech commands. It wasn't like the Google Assistant we now have though. You could perform only simple tasks such as asking your phone to play some music or taking a note. It was unable to read your notifications or make a joke for you. This release was also packed with support for Shockwave Flash, which Apple resisted to provide in their iOS devices. In 2010 came the next minor release that we all know well, Android 2.3 \"Gingerbread\". In the pure build without any modifications, it had the color green and black seeped all around the user interface. It was also the first Android version to introduce that three-tap easter egg which only had an art of Android and gingerbread in the middle of zombies. Tapping it would create a toast that reads \"Zombie art by Jack Larson\". 2011 was a really weird time for Android, introducing its tablet-focused redesigned user interface with the new design chief \"Matias Duarte\". Being the only completely proprietary major version of Android, 3.0 and 3.1 \"Honeycomb\", Motorola Xoom was the first model to debut it through. It introduced the first implementation of navigation dock that we would see lasting long and also debutted a prototype of Holo design, the combination of the colors blue and black as inspired by space-alike designs. It also introduced the card-like recents UI and the recents button. Previous Android versions would use icon-based \"Task Manager\" just like classic Windows Alt+Tab UI. Its easter egg was a bee with transparent background, posting the toast \"REZZZZZZZ...\" when you tap on it. In a later date, again in 2011, comes Android 4.0 \"Ice Cream Sandwich\". This one made phones and tablets have a single unified UI with its more modern design approch. While it carried over the accent change, navigation dock (which would become navigation bar on phones), card-like recents UI and every other change Honeycomb did. It was pretty buggy and was known to have performance bottlenecks as all new major releases would have. Its easter egg was rather inspired by the well-known Nyan Cat, remaking it for Android and replacing the cat with the Android mascot made in pixelated style and with an ice cream sandwich cage. You would have to keep holding on your screen for it to appear as your phone vibrates stronger and stronger the more the Android grows. If you just tap, it would say \"Android 4.0: Ice Cream Sandwich\" in a toast. The biggest impact to Android was made by 4.1 and 4.2 \"Jelly Bean\", packing lots and lots of improvements inside, released in 2012. It included lots of stability and performance includes over ICS, but also debutted the quick settings for the first time for mobile devices, and multi-user support for tablet PCs. It also packed in the support for widgets directly in lock screen as well as the Google Now feature. It also introduced interactive notifications such as additional functions like reply and mark as read, and expanded capabilities of voice commands. Its easter egg would show you a jellybean that would become the Android mascot's face when tapped on, along with a big custom toast saying \"Android 4.\u00bc.2 JELLY BEAN \". Long pressing on it would show you a screen with bunch of jellybeans floating around with which you could interact with and drag around. 2013 came the next minor release in Android 4.x family - 4.4 \"KitKat\". You guessed it right, this version's codename and easter egg was inspired by the Nestle KitKat, the chocolate! This release dropped the absolutely black backgrounds and absolutely blue accents. It also introduced support for transparent status bar and the first implementation of \"OK Google\" hotword, although it would work only when you're on home screen or in Google app with screen on. It also debutted its first ever Google Now page which was a feature exclusive to Nexus Launcher (now known as Pixel Launcher) users. Its easter egg would show you the letter \"K\" which would spin randomly as you tap on it, show the Nestle KitKat style \"Android\" text when you long press on it. Though, if you long press on it too, it would bring up the square style screen saver, showing icons for all Android versions ever released so far. Fall 2014 was another breakthrough time for Android, debutting 5.0 codenamed \"Lollipop\" with its all-new design approach known as \"Material Design\". It has been substantially changed over the years but kept the base the same. The whole UI was redesigned, introducing \"heads-up notifications\" that would show important notifications and conversations on top of your screen for a short period of time as they come, notifications on lock screen to surpass requirements to unlock your device to see notifications, swipe-twice quick settings panel, support for LTE (A.K.A. 4G) and many many more. This is also the first release desktop-focused software based on Android would emerge. Though, it introduced lots of bugs along which would be ironed out the next year as well. Its easter egg would show a little circle which would change color and evolve into a lollipop as you tap, with the next \"lollipop\" taking place. Tapping on it for a few more times and then long pressing would bring up a Flappy Bird alike game designed around the Android mascot as the bird and lollipops as pipes as well! Android 6.0 \"Marshmallow\" came along in 2015. Even though it seemed like a minor release, it had lots of things put over Android Lollipop: Now On Tap, a card-based Google Now interface you could access by long pressing on home button, new touch response, all-new Do Not Disturb, app-specific runtime permissions, support for fingerprint sensors, a bit more improved face unlocking in Smart Lock, support for USB-C, paginated QS, etc. It also introduced a hidden API for split screen, although buggy, support for \"System UI Tuner\" that allowed you to change several aspects of the UI. Its easter egg was around the same as Lollipop, except it directly shows the big circle with a special icon presenting the letter \"M\", which would then turn into Android-ified marshmallow and tapping a few more times then long pressing would bring the refreshed Android Flappy Bird that adds support for multiplayer same-screen gaming, allowing up to 6 users to participate on the same device. Android 7.0 \"Nougat\" debutted in 2016 and has gotten even more significate features. Support for 3 rd party tiles in quick settings and introduction of editing the QS, eventually dropping the separate Settings activity for editing those, is one of the most productive ones. It introduced inline reply function for notifications too, allowing you to reply notifications without the need to leave your current app. It also introduced a proper implementation of split screen that you could access by long pressing on recents button. It's also the first Android version to allow debutting of Google Pixel series, starting with Pixel and Pixel XL. It also introduced Google Assistant and the Data Saver feature. Along with those, although less known, it also introduced hamburger menu in Settings, allowing you to jump between Settings menus without the need to go back. Its easter egg would show you a card styled letter \"N\", which would bring up the famous QS-dependent cat game, also named \"Neko\" (\u732b, means \"Cat\" in Japanese) when tapped on multiple times then long pressed. Android 8.0 \"Oreo\" launched in 2017, has tweaked the interface once again, introducing a wallpaper-dependent prototype of dark mode. It also introduced more productivity features such as Always On Display, notification snoozing, quick toggles for specific tiles such as WiFi and mobile data, Project Treble and so GSIs (Generic System Images) that eventually reduce the time OEMs would take to release newer updates, along with a hidden API for two-button navigation and so launcher-dependent recents activity in place of the one introduced in System UI. Google also introduced Android Go for low-end devices, the first implementation of Google Play Protect, the built-in antivirus for Android devices and redesigned emojis along with its event. Its easter egg on 8.0 would show three circles stacked inside each other, which then got replaced with the symbol of Oreo biscuit with Android emblem on top instead of \"OREO\" logo on 8.1. Tappping on it a few times then long pressing would open up another activity that shows a black octopus floating around in the depths of a blue sea, which you could move around by dragging its head. The Android 8.0 commercial titled \"Android Oreo - Open Wonder\", featuring the traditions of the Oreo cookie too. Android 9 \"Pie\" was launched in August 2018, eventually slowly redesigning the interface once again. The volume panel has been made more minimal and moved to sides of screen, depending on where your volume keys are. Android Pie also standardized swipe-up app drawer and made two-button navigation available, a more pleasant battery saver mode, which drops disablement of animations and filling of UI bars with the color orange, dropping expanded QS tiles and introducing Smart Reply. It also had a hidden API for full navigation gestures, although buggy, and is the last Android version to support recents dependent on System UI. Its easter egg would show the letter \"P\" in a stylish way with kind of hypnotizing animation, which in some devices would change color as you tap on it and launch a basic whiteboard activity that you could draw things on. Android 10 \"Q\", the first Android version that didn't have a codename, was launched in September 2019. It brought a ton of new features such as the proper full screen navigation, updating runtime permissions so introducing scoped storage and hidden API for more tweakable location permission, making system-wide dark theme an actual thing and taking it out of being a prototype, a lot deeper system customization by using \"Styles & Wallpapers\", an all-new Focus Mode and on-demand live captions. It also dropped face unlock from Smart Lock, making it a device-specific implementation. Its easter egg would show the text \"android 10\", which you can turn into \"android Q\" then press a few times onto to bring an icon quiz to test how good you are with material design icons. Android 11 \"R\", unofficially codenamed \"Red Velvet Cake\", was launched in September 2020, bringing the first ever proper implementation of home controls right in your power menu. It also brought the first implementation of music controls on quick settings, taking it out of notification panel and native screen recording. Its easter egg is a way more revamped version of Neko that was seen on Android Nougat, which can be triggered by rotating the white dot clockwise until the number \"11\" appears on screen. It got renamed to \"Neko Controls\" internally, although it's named \"Cat Controls\" as the app provider for home controls. Android 12 \"Snow Cone\", launched in October 2021, revamped the interface for the 3 rd time, bringing up a new wallpaper-based design guidelines named \"Material You\", As in its name, \"it's meant to be for you\", as in the system respecting the way you customize it. The interface got bigger elements that's aimed to be more accessible and consistent. It also introduced smooth switch between regular screen on and AOD, eventually reducing unnecessary display power-offs for LCD displays. Its easter egg would show a clock that shows the current time, and rotating the minutes either clockwise or counterclockwise until it's 12:00 then releasing when it's 12:00, it would show the Android 12 icon with lots of differently sized circles resembling a color blindness test. This reveals 2 things at once: The home controls QS tile with Cat Controls being carried over from Android 11, and the Paint Chips widget showing the entire color palette generated from your wallpaper by Android 12's theming engine. Android 13 \"Tiramisu\" was launched in the source code and released to first end-user device in August 2022. It introduced the revamped version of taskbar for tablet devices, and did some little minor tweaks throughout the System UI, just like the upgrade from Android Lollipop to Marshmallow. Its easter egg is about the same with Android 12's, with the only exception being that you have to make the clock show 1:00 instead of 12:00. What is AOSP? \u00b6 AOSP, standing for Android Open Source Project, is Google's approach to make the Android operating system open source without blending in Google's proprietary aspects, eventually letting development for devices in multiple aspects whether if you're just an app developer, OEM or a custom platform developer. Its sources consist of lots of components but can be broken down to a few simple matters. Build system, firstly coded in Make and Ninja then switched to Soong UI and Blueprint. Framework, coded entirely in Java. External components and utilities, adapted for Android and ARM processor. Android packages, the apps that have direct connection with framework. Device sources, combination of Makefiles and packages. Linux kernel, made for a specific device. Vendor proprietary blobs, straight up binaries and Makefiles specifying where to copy or install them. What if you want to contribute to it? \u00b6 The source code is in android Git repositories - Git at Google along with the Issue Tracker being located at Google Issue Tracker (although bloated since a long time). You just do your change, then append Test: tag into your commit message, explaining how did you test the change, then submit to Google by uploading it to review by using repo upload . What is A \"Custom ROM\"? \u00b6 ROM in computer terms means \"Read-Only Memory\". Based on this definition, we, custom software developers, define \"ROM\" as \"software stored in read-only partitions\". A custom ROM is a custom software Android devices store in their usually-read-only partitions such as system , vendor , product . List of Some Well-Known Custom ROMs \u00b6 LineageOS (Father of most of the Android projects) Pixel Experience (Provides Pixel device functionalities to non-Pixel devices) Evolution X (Similar to Pixel Experience, provides way deeper customization) /e/OS (LineageOS modified to be more privacy-aware) GrapheneOS (Pixel-first privacy-aware ROM) ProtonAOSP (Pure AOSP with lots of platform fixes and little customization by a Pixel custom ROM developer) Project Kaleidoscope (Enterprise-degree ROM based on AOSP, partnering with OEMs to bring in a more professional system) Libre Mobile OS Droid (Professional-degree FOSS ROM based on LineageOS developed by a GSI maintainer, making various new features for Android completely opensource and easy to implement on other software) References \u00b6 Base for module: github.com:ucoruh/course-note-sample History: Android versions: A living history from 1.0 to 13 | ComputerWorld","title":"Introduction of AOSP and Its History"},{"location":"week-1/week-1/#introduction-to-aosp","text":"","title":"Introduction to AOSP"},{"location":"week-1/week-1/#week-1-aosp-introduction-and-history","text":"","title":"Week-1 (AOSP Introduction and History)"},{"location":"week-1/week-1/#androids-birth-and-its-development-process","text":"Download DOC , SLIDE , PPTX","title":"Android's Birth and Its Development Process"},{"location":"week-1/week-1/#outline","text":"What is Android and what is it intended for AOSP's birth Custom ROMs and custom device development Android was originally made NOT by Google but an independent company","title":"Outline"},{"location":"week-1/week-1/#what-is-android","text":"When it comes to AOSP, which stands for Android Open Source Project, there are lots of people getting confused by the term even including majority of Android users themselves. So it's required to explain what is Android first. Android is a mobile operating system developed by Google for various platforms such as smartphones, tablet PCs and even laptops. It not only kept itself up to date with today's world, but also is known to always have an open hole for development as per human requests constantly changing. Every few Android versions, Google comes with new design guidelines which are made to both look elegant and stay future-proof. Nowadays, hundreds of thousands of people have been contributing to Android world by either their unique software based on it, contributing to upstream source code, manufacturing their own device with a modified version of it or simply porting it to plenty of devices you would never expect to see! We have even seen Android running on a Nintendo Switch!","title":"What is Android?"},{"location":"week-1/week-1/#history-of-android","text":"Believe it or not, Android was originally intended to be made for digital cameras, developed by a now-acquired-by-Google Android Inc, an American tech company, started development in 2003. Before it could get its public release, it had lots of changes - It got acquired by Google, then rebased on the Linux kernel to be intended to be made for PCs as an OSS (Open Source Software) licensed under Apache 2.0 in 2004. In 2007, after 3 years since getting acquired and rebased by Google, Open Handset Alliance was found to make Android supported by even wider range of devices by providing the core features it now has such as installing 3 rd party apps, wireless networking, etc. In 2008, 1 year after foundation of O.H.A, T-Mobile got the chance to feature this brand new operating system with majority of Google apps built-in: Android 1.0, codenamed \"Astro Boy\". Throughout its development cycle, 4 minor releases (1.1~1.4) have been made in top of 1.0 without any codename changes. In early 2009 was the first ever Android version we most probably know getting released, also making a huge change on Android's codenaming style that we know today: Android 1.5 \"Cupcake\". This release gave the UI some refreshments and lots of optimizations for touch screens as well as the introduction of on-screen keyboard that's the core feature that a smartphone and tablet PC has to offer today. It also introduced 3 rd party widgets, which Apple surely still has a long way off for. After semi-annual development cycle over Android Cupcake came Android Donut, incrementing minor release to 1.6 and getting released in Fall 2009. This release included adaptation to newer set of technologies such as over-the-air adaptation for different screen sizes and CDMA (also known as 3G network) support. Keeping up the pace for development came the 2 nd major version of Android, 2.0 \"Eclair\". This release is the first one to include, hold your horses because this is also something Android first introduced as well, speech-based navigation! As you would drive on road, the navigation would navigate you through towards your destination. It was also packed with introduction of live wallpaper support and speech-to-text, also known as speech dictation, availability. One downside though, it's also the first Android version to get a feature from iOS which made Apple extremely angry: Pinch to zoom. The next minor version, 2.1, didn't increment the codename but only was packed with some platform fixes. Just after 4 months since 2.1 came 2.2, incrementing codename to \"Froyo\". This release included huge amounts of performance improvements as well as standardizing some features such as the well-known dock and speech commands. It wasn't like the Google Assistant we now have though. You could perform only simple tasks such as asking your phone to play some music or taking a note. It was unable to read your notifications or make a joke for you. This release was also packed with support for Shockwave Flash, which Apple resisted to provide in their iOS devices. In 2010 came the next minor release that we all know well, Android 2.3 \"Gingerbread\". In the pure build without any modifications, it had the color green and black seeped all around the user interface. It was also the first Android version to introduce that three-tap easter egg which only had an art of Android and gingerbread in the middle of zombies. Tapping it would create a toast that reads \"Zombie art by Jack Larson\". 2011 was a really weird time for Android, introducing its tablet-focused redesigned user interface with the new design chief \"Matias Duarte\". Being the only completely proprietary major version of Android, 3.0 and 3.1 \"Honeycomb\", Motorola Xoom was the first model to debut it through. It introduced the first implementation of navigation dock that we would see lasting long and also debutted a prototype of Holo design, the combination of the colors blue and black as inspired by space-alike designs. It also introduced the card-like recents UI and the recents button. Previous Android versions would use icon-based \"Task Manager\" just like classic Windows Alt+Tab UI. Its easter egg was a bee with transparent background, posting the toast \"REZZZZZZZ...\" when you tap on it. In a later date, again in 2011, comes Android 4.0 \"Ice Cream Sandwich\". This one made phones and tablets have a single unified UI with its more modern design approch. While it carried over the accent change, navigation dock (which would become navigation bar on phones), card-like recents UI and every other change Honeycomb did. It was pretty buggy and was known to have performance bottlenecks as all new major releases would have. Its easter egg was rather inspired by the well-known Nyan Cat, remaking it for Android and replacing the cat with the Android mascot made in pixelated style and with an ice cream sandwich cage. You would have to keep holding on your screen for it to appear as your phone vibrates stronger and stronger the more the Android grows. If you just tap, it would say \"Android 4.0: Ice Cream Sandwich\" in a toast. The biggest impact to Android was made by 4.1 and 4.2 \"Jelly Bean\", packing lots and lots of improvements inside, released in 2012. It included lots of stability and performance includes over ICS, but also debutted the quick settings for the first time for mobile devices, and multi-user support for tablet PCs. It also packed in the support for widgets directly in lock screen as well as the Google Now feature. It also introduced interactive notifications such as additional functions like reply and mark as read, and expanded capabilities of voice commands. Its easter egg would show you a jellybean that would become the Android mascot's face when tapped on, along with a big custom toast saying \"Android 4.\u00bc.2 JELLY BEAN \". Long pressing on it would show you a screen with bunch of jellybeans floating around with which you could interact with and drag around. 2013 came the next minor release in Android 4.x family - 4.4 \"KitKat\". You guessed it right, this version's codename and easter egg was inspired by the Nestle KitKat, the chocolate! This release dropped the absolutely black backgrounds and absolutely blue accents. It also introduced support for transparent status bar and the first implementation of \"OK Google\" hotword, although it would work only when you're on home screen or in Google app with screen on. It also debutted its first ever Google Now page which was a feature exclusive to Nexus Launcher (now known as Pixel Launcher) users. Its easter egg would show you the letter \"K\" which would spin randomly as you tap on it, show the Nestle KitKat style \"Android\" text when you long press on it. Though, if you long press on it too, it would bring up the square style screen saver, showing icons for all Android versions ever released so far. Fall 2014 was another breakthrough time for Android, debutting 5.0 codenamed \"Lollipop\" with its all-new design approach known as \"Material Design\". It has been substantially changed over the years but kept the base the same. The whole UI was redesigned, introducing \"heads-up notifications\" that would show important notifications and conversations on top of your screen for a short period of time as they come, notifications on lock screen to surpass requirements to unlock your device to see notifications, swipe-twice quick settings panel, support for LTE (A.K.A. 4G) and many many more. This is also the first release desktop-focused software based on Android would emerge. Though, it introduced lots of bugs along which would be ironed out the next year as well. Its easter egg would show a little circle which would change color and evolve into a lollipop as you tap, with the next \"lollipop\" taking place. Tapping on it for a few more times and then long pressing would bring up a Flappy Bird alike game designed around the Android mascot as the bird and lollipops as pipes as well! Android 6.0 \"Marshmallow\" came along in 2015. Even though it seemed like a minor release, it had lots of things put over Android Lollipop: Now On Tap, a card-based Google Now interface you could access by long pressing on home button, new touch response, all-new Do Not Disturb, app-specific runtime permissions, support for fingerprint sensors, a bit more improved face unlocking in Smart Lock, support for USB-C, paginated QS, etc. It also introduced a hidden API for split screen, although buggy, support for \"System UI Tuner\" that allowed you to change several aspects of the UI. Its easter egg was around the same as Lollipop, except it directly shows the big circle with a special icon presenting the letter \"M\", which would then turn into Android-ified marshmallow and tapping a few more times then long pressing would bring the refreshed Android Flappy Bird that adds support for multiplayer same-screen gaming, allowing up to 6 users to participate on the same device. Android 7.0 \"Nougat\" debutted in 2016 and has gotten even more significate features. Support for 3 rd party tiles in quick settings and introduction of editing the QS, eventually dropping the separate Settings activity for editing those, is one of the most productive ones. It introduced inline reply function for notifications too, allowing you to reply notifications without the need to leave your current app. It also introduced a proper implementation of split screen that you could access by long pressing on recents button. It's also the first Android version to allow debutting of Google Pixel series, starting with Pixel and Pixel XL. It also introduced Google Assistant and the Data Saver feature. Along with those, although less known, it also introduced hamburger menu in Settings, allowing you to jump between Settings menus without the need to go back. Its easter egg would show you a card styled letter \"N\", which would bring up the famous QS-dependent cat game, also named \"Neko\" (\u732b, means \"Cat\" in Japanese) when tapped on multiple times then long pressed. Android 8.0 \"Oreo\" launched in 2017, has tweaked the interface once again, introducing a wallpaper-dependent prototype of dark mode. It also introduced more productivity features such as Always On Display, notification snoozing, quick toggles for specific tiles such as WiFi and mobile data, Project Treble and so GSIs (Generic System Images) that eventually reduce the time OEMs would take to release newer updates, along with a hidden API for two-button navigation and so launcher-dependent recents activity in place of the one introduced in System UI. Google also introduced Android Go for low-end devices, the first implementation of Google Play Protect, the built-in antivirus for Android devices and redesigned emojis along with its event. Its easter egg on 8.0 would show three circles stacked inside each other, which then got replaced with the symbol of Oreo biscuit with Android emblem on top instead of \"OREO\" logo on 8.1. Tappping on it a few times then long pressing would open up another activity that shows a black octopus floating around in the depths of a blue sea, which you could move around by dragging its head. The Android 8.0 commercial titled \"Android Oreo - Open Wonder\", featuring the traditions of the Oreo cookie too. Android 9 \"Pie\" was launched in August 2018, eventually slowly redesigning the interface once again. The volume panel has been made more minimal and moved to sides of screen, depending on where your volume keys are. Android Pie also standardized swipe-up app drawer and made two-button navigation available, a more pleasant battery saver mode, which drops disablement of animations and filling of UI bars with the color orange, dropping expanded QS tiles and introducing Smart Reply. It also had a hidden API for full navigation gestures, although buggy, and is the last Android version to support recents dependent on System UI. Its easter egg would show the letter \"P\" in a stylish way with kind of hypnotizing animation, which in some devices would change color as you tap on it and launch a basic whiteboard activity that you could draw things on. Android 10 \"Q\", the first Android version that didn't have a codename, was launched in September 2019. It brought a ton of new features such as the proper full screen navigation, updating runtime permissions so introducing scoped storage and hidden API for more tweakable location permission, making system-wide dark theme an actual thing and taking it out of being a prototype, a lot deeper system customization by using \"Styles & Wallpapers\", an all-new Focus Mode and on-demand live captions. It also dropped face unlock from Smart Lock, making it a device-specific implementation. Its easter egg would show the text \"android 10\", which you can turn into \"android Q\" then press a few times onto to bring an icon quiz to test how good you are with material design icons. Android 11 \"R\", unofficially codenamed \"Red Velvet Cake\", was launched in September 2020, bringing the first ever proper implementation of home controls right in your power menu. It also brought the first implementation of music controls on quick settings, taking it out of notification panel and native screen recording. Its easter egg is a way more revamped version of Neko that was seen on Android Nougat, which can be triggered by rotating the white dot clockwise until the number \"11\" appears on screen. It got renamed to \"Neko Controls\" internally, although it's named \"Cat Controls\" as the app provider for home controls. Android 12 \"Snow Cone\", launched in October 2021, revamped the interface for the 3 rd time, bringing up a new wallpaper-based design guidelines named \"Material You\", As in its name, \"it's meant to be for you\", as in the system respecting the way you customize it. The interface got bigger elements that's aimed to be more accessible and consistent. It also introduced smooth switch between regular screen on and AOD, eventually reducing unnecessary display power-offs for LCD displays. Its easter egg would show a clock that shows the current time, and rotating the minutes either clockwise or counterclockwise until it's 12:00 then releasing when it's 12:00, it would show the Android 12 icon with lots of differently sized circles resembling a color blindness test. This reveals 2 things at once: The home controls QS tile with Cat Controls being carried over from Android 11, and the Paint Chips widget showing the entire color palette generated from your wallpaper by Android 12's theming engine. Android 13 \"Tiramisu\" was launched in the source code and released to first end-user device in August 2022. It introduced the revamped version of taskbar for tablet devices, and did some little minor tweaks throughout the System UI, just like the upgrade from Android Lollipop to Marshmallow. Its easter egg is about the same with Android 12's, with the only exception being that you have to make the clock show 1:00 instead of 12:00.","title":"History of Android"},{"location":"week-1/week-1/#what-is-aosp","text":"AOSP, standing for Android Open Source Project, is Google's approach to make the Android operating system open source without blending in Google's proprietary aspects, eventually letting development for devices in multiple aspects whether if you're just an app developer, OEM or a custom platform developer. Its sources consist of lots of components but can be broken down to a few simple matters. Build system, firstly coded in Make and Ninja then switched to Soong UI and Blueprint. Framework, coded entirely in Java. External components and utilities, adapted for Android and ARM processor. Android packages, the apps that have direct connection with framework. Device sources, combination of Makefiles and packages. Linux kernel, made for a specific device. Vendor proprietary blobs, straight up binaries and Makefiles specifying where to copy or install them.","title":"What is AOSP?"},{"location":"week-1/week-1/#what-if-you-want-to-contribute-to-it","text":"The source code is in android Git repositories - Git at Google along with the Issue Tracker being located at Google Issue Tracker (although bloated since a long time). You just do your change, then append Test: tag into your commit message, explaining how did you test the change, then submit to Google by uploading it to review by using repo upload .","title":"What if you want to contribute to it?"},{"location":"week-1/week-1/#what-is-a-custom-rom","text":"ROM in computer terms means \"Read-Only Memory\". Based on this definition, we, custom software developers, define \"ROM\" as \"software stored in read-only partitions\". A custom ROM is a custom software Android devices store in their usually-read-only partitions such as system , vendor , product .","title":"What is A \"Custom ROM\"?"},{"location":"week-1/week-1/#list-of-some-well-known-custom-roms","text":"LineageOS (Father of most of the Android projects) Pixel Experience (Provides Pixel device functionalities to non-Pixel devices) Evolution X (Similar to Pixel Experience, provides way deeper customization) /e/OS (LineageOS modified to be more privacy-aware) GrapheneOS (Pixel-first privacy-aware ROM) ProtonAOSP (Pure AOSP with lots of platform fixes and little customization by a Pixel custom ROM developer) Project Kaleidoscope (Enterprise-degree ROM based on AOSP, partnering with OEMs to bring in a more professional system) Libre Mobile OS Droid (Professional-degree FOSS ROM based on LineageOS developed by a GSI maintainer, making various new features for Android completely opensource and easy to implement on other software)","title":"List of Some Well-Known Custom ROMs"},{"location":"week-1/week-1/#references","text":"Base for module: github.com:ucoruh/course-note-sample History: Android versions: A living history from 1.0 to 13 | ComputerWorld","title":"References"},{"location":"week-2/week-2/","text":"Introduction to AOSP \u00b6 Week-2 (Preparing to Build and Building AOSP) \u00b6 Installing Required Packages, Getting the Source and Building \u00b6 Download DOC , SLIDE , PPTX Outline \u00b6 Gathering maximum set of packages and configuration required for a proper AOSP build Installing binaries that aren't usually present on distro repositories Basics of repo tool Gathering a custom ROM (LineageOS) source and building it for your device Preparing to Build \u00b6 Of course before we can build this piece of wonderful software named AOSP, we need to first gather a huge set of packages we need to install. Many distributions have different guides about this on their documentations. However, Google supports Debian-based ones strictly. Also keep in mind that ANY KINDS OF SUBSYSTEMS LIKE WSL WILL NOT WORK! You will STRICTLY need a buffed VM with Linux on it or a Linux installation on your own PC as AOSP notes - \"You must use Linux; building under either MacOS or Windows isn't supported\". Cloud VMs also work but might make things like file transfer hard depending on your Internet connection and availability. Now, let's come to package installations. Simply put, this command will install all the tools you might need on various distributions of Android singlehandedly (except the repo tool, we'll install this discretely). Most of these are already present on Android source documentation. sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig xmlstarlet python3 python-is-python3 repo Tool \u00b6 repo is a CLI tool developed by Google in Python to provide an easy way to clone all repositories to build something from source. It works in manifest basis and has 2 different manifest handlers: \"Upstream manifest\" and \"Local manifest\" Upstream manifest is an entire Git repo including the default manifest as well as all other linked manifests needed to clone all repositories needed for a distribution to be built. The common tree convention is that there's a README providing little oversight on how to gather the sources (and sometimes how to build it too), a default.xml file that has core repositories from upstream AOSP and <include /> tags to include more manifests in the same repository, a snippets folder that includes additional manifests that do the modifications over the AOSP manifest by <remove-project /> and other tags processed by repo tool, and sometimes assets folder that includes all other assets for the README. You initialize your local directory with it. Local manifest on contrary is a single manifest-ie that has additional and/or device-specific repository modifications that aren't usually provided by upstream manifest. You place these into .repo/local_manifests in your local directory after initializing upstream manifest. Pretty much same tags and parameters are processed by repo tool and appended into the generated manifest that can be viewed by repo manifest . Installing repo \u00b6 Since this piece of tool doesn't exist on all Linux distros or otherwise usually outdated, Google provides us a generic piece of commands to install it manually. These usually tear down into this little script; export REPO = $( mktemp /tmp/repo.XXXXXXXXX ) curl -o ${ REPO } https://storage.googleapis.com/git-repo-downloads/repo gpg --recv-key 8BB9AD793E8E6153AF0F9A4416530D5E920F5C65 curl -s https://storage.googleapis.com/git-repo-downloads/repo.asc | gpg --verify - ${ REPO } && sudo install -m 755 ${ REPO } /bin/repo This first downloads the binary from Google API server, verifies it by checking against Google's key and then globally installs it. Initializing repository \u00b6 repo init is the one we need for this part. The parameters we must pass are -u <url> and -b <branch or tag> . To get these informations, pretty much all ROMs have a repository that has one of these names which you should check around: android , android_manifest , manifest , platform_manifest There are also some parameters that will disable some checks or otherwise minimize the source size by trimming out branches, Git history and such. The command I personally use when initializing a repository is like this; repo init -u https://github.com/LineageOS/android -b lineage-19.1 --depth = 1 --no-tags --no-clone-bundle --current-branch --config-name This initializes repositories for an Android distribution named LineageOS, which is what we use when we need an Android distribution that doesn't ship Google apps and is easy to maintain unofficially. The extra parameters can be torn down to this; Initializes lineage-19.1 branch. Clones only single revision of all repositories - Shallow repository, no history is generated. Doesn't clone tags. This is useful when you have nothing to do with tags opened on repositories. Doesn't use clone bundles, kind of saves storage space. Clones only the branch specified in the manifest instead of all branches. Allows user to configure their name and email when initializing repo instead of using the one in global Git configuration. Once the repository is initialized, we'll also need to clone repositories that are made for your own device. These repositories are usually just device/brand/codename , kernel/brand/chipset and vendor/brand . For example, I'll be building this for Redmi Note 10S, which has the codename of rosemary . If you want to learn yours, you can search over GitHub with your device brand and model. Getting All Repositories for Building \u00b6 Now that we're set up, all we need to do is a single command to sync everything up, which might take too long depending on your Internet connection speed; repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j $( nproc --all ) This command can be torn down to this; Clones only current branch. Doesn't use clone bundles. Doesn't clone tags. Optimizes fetching by using different methods. Prunes the repositories that have been removed after changing something in manifest. Forcefully syncs. This means that if remote for a repository has been changed in manifest, it first removes the old repository and clones the new one. Uses number of threads reported by the distribution to be available for syncing process. If you replace $(nproc --all) with a fixed number like 4, it will use that amount of threads instead. Build Process \u00b6 Android build system uses multiple build processes at single command at once. Simply put, it uses these languages in its build system alone; Make Java Go Bazel Blueprint Rust Pesto Python During the build, other functions and tools like GCC might be invoked when necessary as well. Before starting to build, we need to ensure our device sources are adapted to Lineage's ones. This piece of command batch will do it all for you, presuming you've used the previously given manifest. cd device/redmi/rosemary rename 's/kscope/lineage/' kscope* sed -i 's/kscope/lineage/' AndroidProducts.mk lineage_* You might also need to do some manual edits like overlay adaptations and vendor configuration file path, which won't be covered here. Setting Up Current Session for Building Process \u00b6 Google gives us a nice script inside build folder named envsetup.sh . This defines and some checks prior any kinds of build process. Trying to invoke make without first sourcing will give you an output like this and abort; build/make/core/main.mk:2: Calling make directly is no longer supported. build/make/core/main.mk:3: Either use 'envsetup.sh; m' or 'build/soong/soong_ui.bash --make-mode' build/make/core/main.mk:4: *** done. Stop. This is because Make takes advantage of functions defined by EnvSetup and behaves accordingly. So let's source it first for preparing our current shell session; source build/envsetup.sh Use of lunch \u00b6 lunch is a function to simply set up variables defined by your device sources and platform right away. It can be invoked simply by giving it as a command, it will then give you a list of \"product combos\" that you can choose from. $ lunch You're building on Linux Lunch menu... pick a combo: 1. aosp_arm-eng 2. aosp_arm64-eng 3. aosp_car_arm-userdebug 4. aosp_car_arm64-userdebug 5. aosp_car_x86-userdebug 6. aosp_car_x86_64-userdebug 7. aosp_cf_arm64_auto-userdebug 8. aosp_cf_arm64_phone-userdebug 9. aosp_cf_x86_64_foldable-userdebug 10. aosp_cf_x86_64_pc-userdebug 11. aosp_cf_x86_64_phone-userdebug 12. aosp_cf_x86_64_tv-userdebug 13. aosp_cf_x86_auto-userdebug 14. aosp_cf_x86_phone-userdebug 15. aosp_cf_x86_tv-userdebug 16. aosp_x86-eng 17. aosp_x86_64-eng 18. arm_krait-eng 19. arm_v7_v8-eng 20. armv8-eng 21. armv8_cortex_a55-eng 22. armv8_kryo385-eng 23. car_ui_portrait-userdebug 24. car_x86_64-userdebug 25. gsi_car_arm64-userdebug 26. gsi_car_x86_64-userdebug 27. lineage_rosemary-eng 28. lineage_rosemary-user 29. lineage_rosemary-userdebug 30. qemu_trusty_arm64-userdebug 31. sdk_car_arm-userdebug 32. sdk_car_arm64-userdebug 33. sdk_car_portrait_x86_64-userdebug 34. sdk_car_x86-userdebug 35. sdk_car_x86_64-userdebug 36. silvermont-eng 37. uml-userdebug Which would you like? [aosp_arm-eng] Different Ways to Start Building \u00b6 Unlike all other software, AOSP has different ways to trigger building, the most commonly used are m and make . However, LineageOS also provides additional functions like mka and brunch . These all do the same and invoke $(gettop)/build/soong/soong_ui.bash --build-mode --all-modules --dir=\"$(pwd)\" command for build process. What soong_ui.bash does is that it first compiles soong_ui in Go, then invokes the compiled binary with the parameter given in the end, starting the actual build process. Keep in mind though, building AOSP is pretty heavy on system resources so you might want to leave your system aside until it finishes compiling. To start building as a \"flashable ZIP\", just invoke m bacon as direct m will instead build just images and leave the flashing work onto you - You'll need to flash all images by yourself if there's nothing to handle that automatically, which only Google Pixel devices usually do. References \u00b6 Required packages: Establishing a Build Environment | Android Open Source Project Installation of repo tool: Source Control Tools - Repo | Android Open Source Project","title":"Sources and Compilation Steps"},{"location":"week-2/week-2/#introduction-to-aosp","text":"","title":"Introduction to AOSP"},{"location":"week-2/week-2/#week-2-preparing-to-build-and-building-aosp","text":"","title":"Week-2 (Preparing to Build and Building AOSP)"},{"location":"week-2/week-2/#installing-required-packages-getting-the-source-and-building","text":"Download DOC , SLIDE , PPTX","title":"Installing Required Packages, Getting the Source and Building"},{"location":"week-2/week-2/#outline","text":"Gathering maximum set of packages and configuration required for a proper AOSP build Installing binaries that aren't usually present on distro repositories Basics of repo tool Gathering a custom ROM (LineageOS) source and building it for your device","title":"Outline"},{"location":"week-2/week-2/#preparing-to-build","text":"Of course before we can build this piece of wonderful software named AOSP, we need to first gather a huge set of packages we need to install. Many distributions have different guides about this on their documentations. However, Google supports Debian-based ones strictly. Also keep in mind that ANY KINDS OF SUBSYSTEMS LIKE WSL WILL NOT WORK! You will STRICTLY need a buffed VM with Linux on it or a Linux installation on your own PC as AOSP notes - \"You must use Linux; building under either MacOS or Windows isn't supported\". Cloud VMs also work but might make things like file transfer hard depending on your Internet connection and availability. Now, let's come to package installations. Simply put, this command will install all the tools you might need on various distributions of Android singlehandedly (except the repo tool, we'll install this discretely). Most of these are already present on Android source documentation. sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig xmlstarlet python3 python-is-python3","title":"Preparing to Build"},{"location":"week-2/week-2/#repo-tool","text":"repo is a CLI tool developed by Google in Python to provide an easy way to clone all repositories to build something from source. It works in manifest basis and has 2 different manifest handlers: \"Upstream manifest\" and \"Local manifest\" Upstream manifest is an entire Git repo including the default manifest as well as all other linked manifests needed to clone all repositories needed for a distribution to be built. The common tree convention is that there's a README providing little oversight on how to gather the sources (and sometimes how to build it too), a default.xml file that has core repositories from upstream AOSP and <include /> tags to include more manifests in the same repository, a snippets folder that includes additional manifests that do the modifications over the AOSP manifest by <remove-project /> and other tags processed by repo tool, and sometimes assets folder that includes all other assets for the README. You initialize your local directory with it. Local manifest on contrary is a single manifest-ie that has additional and/or device-specific repository modifications that aren't usually provided by upstream manifest. You place these into .repo/local_manifests in your local directory after initializing upstream manifest. Pretty much same tags and parameters are processed by repo tool and appended into the generated manifest that can be viewed by repo manifest .","title":"repo Tool"},{"location":"week-2/week-2/#installing-repo","text":"Since this piece of tool doesn't exist on all Linux distros or otherwise usually outdated, Google provides us a generic piece of commands to install it manually. These usually tear down into this little script; export REPO = $( mktemp /tmp/repo.XXXXXXXXX ) curl -o ${ REPO } https://storage.googleapis.com/git-repo-downloads/repo gpg --recv-key 8BB9AD793E8E6153AF0F9A4416530D5E920F5C65 curl -s https://storage.googleapis.com/git-repo-downloads/repo.asc | gpg --verify - ${ REPO } && sudo install -m 755 ${ REPO } /bin/repo This first downloads the binary from Google API server, verifies it by checking against Google's key and then globally installs it.","title":"Installing repo"},{"location":"week-2/week-2/#initializing-repository","text":"repo init is the one we need for this part. The parameters we must pass are -u <url> and -b <branch or tag> . To get these informations, pretty much all ROMs have a repository that has one of these names which you should check around: android , android_manifest , manifest , platform_manifest There are also some parameters that will disable some checks or otherwise minimize the source size by trimming out branches, Git history and such. The command I personally use when initializing a repository is like this; repo init -u https://github.com/LineageOS/android -b lineage-19.1 --depth = 1 --no-tags --no-clone-bundle --current-branch --config-name This initializes repositories for an Android distribution named LineageOS, which is what we use when we need an Android distribution that doesn't ship Google apps and is easy to maintain unofficially. The extra parameters can be torn down to this; Initializes lineage-19.1 branch. Clones only single revision of all repositories - Shallow repository, no history is generated. Doesn't clone tags. This is useful when you have nothing to do with tags opened on repositories. Doesn't use clone bundles, kind of saves storage space. Clones only the branch specified in the manifest instead of all branches. Allows user to configure their name and email when initializing repo instead of using the one in global Git configuration. Once the repository is initialized, we'll also need to clone repositories that are made for your own device. These repositories are usually just device/brand/codename , kernel/brand/chipset and vendor/brand . For example, I'll be building this for Redmi Note 10S, which has the codename of rosemary . If you want to learn yours, you can search over GitHub with your device brand and model.","title":"Initializing repository"},{"location":"week-2/week-2/#getting-all-repositories-for-building","text":"Now that we're set up, all we need to do is a single command to sync everything up, which might take too long depending on your Internet connection speed; repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j $( nproc --all ) This command can be torn down to this; Clones only current branch. Doesn't use clone bundles. Doesn't clone tags. Optimizes fetching by using different methods. Prunes the repositories that have been removed after changing something in manifest. Forcefully syncs. This means that if remote for a repository has been changed in manifest, it first removes the old repository and clones the new one. Uses number of threads reported by the distribution to be available for syncing process. If you replace $(nproc --all) with a fixed number like 4, it will use that amount of threads instead.","title":"Getting All Repositories for Building"},{"location":"week-2/week-2/#build-process","text":"Android build system uses multiple build processes at single command at once. Simply put, it uses these languages in its build system alone; Make Java Go Bazel Blueprint Rust Pesto Python During the build, other functions and tools like GCC might be invoked when necessary as well. Before starting to build, we need to ensure our device sources are adapted to Lineage's ones. This piece of command batch will do it all for you, presuming you've used the previously given manifest. cd device/redmi/rosemary rename 's/kscope/lineage/' kscope* sed -i 's/kscope/lineage/' AndroidProducts.mk lineage_* You might also need to do some manual edits like overlay adaptations and vendor configuration file path, which won't be covered here.","title":"Build Process"},{"location":"week-2/week-2/#setting-up-current-session-for-building-process","text":"Google gives us a nice script inside build folder named envsetup.sh . This defines and some checks prior any kinds of build process. Trying to invoke make without first sourcing will give you an output like this and abort; build/make/core/main.mk:2: Calling make directly is no longer supported. build/make/core/main.mk:3: Either use 'envsetup.sh; m' or 'build/soong/soong_ui.bash --make-mode' build/make/core/main.mk:4: *** done. Stop. This is because Make takes advantage of functions defined by EnvSetup and behaves accordingly. So let's source it first for preparing our current shell session; source build/envsetup.sh","title":"Setting Up Current Session for Building Process"},{"location":"week-2/week-2/#use-of-lunch","text":"lunch is a function to simply set up variables defined by your device sources and platform right away. It can be invoked simply by giving it as a command, it will then give you a list of \"product combos\" that you can choose from. $ lunch You're building on Linux Lunch menu... pick a combo: 1. aosp_arm-eng 2. aosp_arm64-eng 3. aosp_car_arm-userdebug 4. aosp_car_arm64-userdebug 5. aosp_car_x86-userdebug 6. aosp_car_x86_64-userdebug 7. aosp_cf_arm64_auto-userdebug 8. aosp_cf_arm64_phone-userdebug 9. aosp_cf_x86_64_foldable-userdebug 10. aosp_cf_x86_64_pc-userdebug 11. aosp_cf_x86_64_phone-userdebug 12. aosp_cf_x86_64_tv-userdebug 13. aosp_cf_x86_auto-userdebug 14. aosp_cf_x86_phone-userdebug 15. aosp_cf_x86_tv-userdebug 16. aosp_x86-eng 17. aosp_x86_64-eng 18. arm_krait-eng 19. arm_v7_v8-eng 20. armv8-eng 21. armv8_cortex_a55-eng 22. armv8_kryo385-eng 23. car_ui_portrait-userdebug 24. car_x86_64-userdebug 25. gsi_car_arm64-userdebug 26. gsi_car_x86_64-userdebug 27. lineage_rosemary-eng 28. lineage_rosemary-user 29. lineage_rosemary-userdebug 30. qemu_trusty_arm64-userdebug 31. sdk_car_arm-userdebug 32. sdk_car_arm64-userdebug 33. sdk_car_portrait_x86_64-userdebug 34. sdk_car_x86-userdebug 35. sdk_car_x86_64-userdebug 36. silvermont-eng 37. uml-userdebug Which would you like? [aosp_arm-eng]","title":"Use of lunch"},{"location":"week-2/week-2/#different-ways-to-start-building","text":"Unlike all other software, AOSP has different ways to trigger building, the most commonly used are m and make . However, LineageOS also provides additional functions like mka and brunch . These all do the same and invoke $(gettop)/build/soong/soong_ui.bash --build-mode --all-modules --dir=\"$(pwd)\" command for build process. What soong_ui.bash does is that it first compiles soong_ui in Go, then invokes the compiled binary with the parameter given in the end, starting the actual build process. Keep in mind though, building AOSP is pretty heavy on system resources so you might want to leave your system aside until it finishes compiling. To start building as a \"flashable ZIP\", just invoke m bacon as direct m will instead build just images and leave the flashing work onto you - You'll need to flash all images by yourself if there's nothing to handle that automatically, which only Google Pixel devices usually do.","title":"Different Ways to Start Building"},{"location":"week-2/week-2/#references","text":"Required packages: Establishing a Build Environment | Android Open Source Project Installation of repo tool: Source Control Tools - Repo | Android Open Source Project","title":"References"}]}