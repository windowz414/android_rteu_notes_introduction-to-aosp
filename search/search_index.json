{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2019-2022 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2019-2022 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"changelog/","text":"Log Creation \u00b6 run following the command via git-bash and copy output to following content git log Course Notes Changelog \u00b6 commit 17986d18a2377020071ce2554687c5a17e6317a8 ( HEAD -> main, origin/main ) Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Fri Mar 4 21 :11:21 2022 +0300 docx and pptx disabled commit 2736da8de40d920b6fef20099d5ba6ce560e942b Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Fri Mar 4 21 :07:00 2022 +0300 week-2 completed and fixed commit 15e42bbccb8527e3b69e0fea9cc98bfcd1158a02 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Fri Mar 4 17 :57:11 2022 +0300 images are added commit 7d60e5ed861659d1bf094de02fd91c1c50842930 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Fri Mar 4 17 :51:57 2022 +0300 initial commit","title":"Changelog"},{"location":"changelog/#log-creation","text":"run following the command via git-bash and copy output to following content git log","title":"Log Creation"},{"location":"changelog/#course-notes-changelog","text":"commit 17986d18a2377020071ce2554687c5a17e6317a8 ( HEAD -> main, origin/main ) Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Fri Mar 4 21 :11:21 2022 +0300 docx and pptx disabled commit 2736da8de40d920b6fef20099d5ba6ce560e942b Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Fri Mar 4 21 :07:00 2022 +0300 week-2 completed and fixed commit 15e42bbccb8527e3b69e0fea9cc98bfcd1158a02 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Fri Mar 4 17 :57:11 2022 +0300 images are added commit 7d60e5ed861659d1bf094de02fd91c1c50842930 Author: Ugur Coruh <ugur.coruh.tr@gmail.com> Date: Fri Mar 4 17 :51:57 2022 +0300 initial commit","title":"Course Notes Changelog"},{"location":"week-1/week-1/","text":"Introduction to AOSP \u00b6 Week-1 (AOSP Introduction and History) \u00b6 Android's Birth and Its Development Process \u00b6 Download DOC , SLIDE , PPTX Outline \u00b6 What is Android and what is it intended for AOSP's birth Custom ROMs and custom device development Android was originally made NOT by Google but an independent company What is Android? \u00b6 When it comes to AOSP, which stands for Android Open Source Project, there are lots of people getting confused by the term even including majority of Android users themselves. So it's required to explain what is Android first. Android is a mobile operating system developed by Google for various platforms such as smartphones, tablet PCs and even laptops. It not only kept itself up to date with today's world, but also is known to always have an open hole for development as per human requests constantly changing. Every few Android versions, Google comes with new design guidelines which are made to both look elegant and stay future-proof. Nowadays, hundreds of thousands of people have been contributing to Android world by either their unique software based on it, contributing to upstream source code, manufacturing their own device with a modified version of it or simply porting it to plenty of devices you would never expect to see! We have even seen Android running on a Nintendo Switch! History of Android \u00b6 Believe it or not, Android was originally intended to be made for digital cameras, developed by a now-acquired-by-Google Android Inc, an American tech company, started development in 2003. Before it could get its public release, it had lots of changes - It got acquired by Google, then rebased on the Linux kernel to be intended to be made for PCs as an OSS (Open Source Software) licensed under Apache 2.0 in 2004. In 2007, after 3 years since getting acquired and rebased by Google, Open Handset Alliance was found to make Android supported by even wider range of devices by providing the core features it now has such as installing 3 rd party apps, wireless networking, etc. In 2008, 1 year after foundation of O.H.A, T-Mobile got the chance to feature this brand new operating system with majority of Google apps built-in: Android 1.0, codenamed \"Astro Boy\". Throughout its development cycle, 4 minor releases (1.1~1.4) have been made in top of 1.0 without any codename changes. In early 2009 was the first ever Android version we most probably know getting released, also making a huge change on Android's codenaming style that we know today: Android 1.5 \"Cupcake\". This release gave the UI some refreshments and lots of optimizations for touch screens as well as the introduction of on-screen keyboard that's the core feature that a smartphone and tablet PC has to offer today. It also introduced 3 rd party widgets, which Apple surely still has a long way off for. After semi-annual development cycle over Android Cupcake came Android Donut, incrementing minor release to 1.6 and getting released in Fall 2009. This release included adaptation to newer set of technologies such as over-the-air adaptation for different screen sizes and CDMA (also known as 3G network) support. Keeping up the pace for development came the 2 nd major version of Android, 2.0 \"Eclair\". This release is the first one to include, hold your horses because this is also something Android first introduced as well, speech-based navigation! As you would drive on road, the navigation would navigate you through towards your destination. It was also packed with introduction of live wallpaper support and speech-to-text, also known as speech dictation, availability. One downside though, it's also the first Android version to get a feature from iOS which made Apple extremely angry: Pinch to zoom. The next minor version, 2.1, didn't increment the codename but only was packed with some platform fixes. Just after 4 months since 2.1 came 2.2, incrementing codename to \"Froyo\". This release included huge amounts of performance improvements as well as standardizing some features such as the well-known dock and speech commands. It wasn't like the Google Assistant we now have though. You could perform only simple tasks such as asking your phone to play some music or taking a note. It was unable to read your notifications or make a joke for you. This release was also packed with support for Shockwave Flash, which Apple resisted to provide in their iOS devices. In 2010 came the next minor release that we all know well, Android 2.3 \"Gingerbread\". In the pure build without any modifications, it had the color green and black seeped all around the user interface. It was also the first Android version to introduce that three-tap easter egg which only had an art of Android and gingerbread in the middle of zombies. Tapping it would create a toast that reads \"Zombie art by Jack Larson\". 2011 was a really weird time for Android, introducing its tablet-focused redesigned user interface with the new design chief \"Matias Duarte\". Being the only completely proprietary major version of Android, 3.0 and 3.1 \"Honeycomb\", Motorola Xoom was the first model to debut it through. It introduced the first implementation of navigation dock that we would see lasting long and also debutted a prototype of Holo design, the combination of the colors blue and black as inspired by space-alike designs. It also introduced the card-like recents UI and the recents button. Previous Android versions would use icon-based \"Task Manager\" just like classic Windows Alt+Tab UI. Its easter egg was a bee with transparent background, posting the toast \"REZZZZZZZ...\" when you tap on it. In a later date, again in 2011, comes Android 4.0 \"Ice Cream Sandwich\". This one made phones and tablets have a single unified UI with its more modern design approch. While it carried over the accent change, navigation dock (which would become navigation bar on phones), card-like recents UI and every other change Honeycomb did. It was pretty buggy and was known to have performance bottlenecks as all new major releases would have. Its easter egg was rather inspired by the well-known Nyan Cat, remaking it for Android and replacing the cat with the Android mascot made in pixelated style and with an ice cream sandwich cage. You would have to keep holding on your screen for it to appear as your phone vibrates stronger and stronger the more the Android grows. If you just tap, it would say \"Android 4.0: Ice Cream Sandwich\" in a toast. The biggest impact to Android was made by 4.1 and 4.2 \"Jelly Bean\", packing lots and lots of improvements inside, released in 2012. It included lots of stability and performance includes over ICS, but also debutted the quick settings for the first time for mobile devices, and multi-user support for tablet PCs. It also packed in the support for widgets directly in lock screen as well as the Google Now feature. It also introduced interactive notifications such as additional functions like reply and mark as read, and expanded capabilities of voice commands. Its easter egg would show you a jellybean that would become the Android mascot's face when tapped on, along with a big custom toast saying \"Android 4.\u00bc.2 JELLY BEAN \". Long pressing on it would show you a screen with bunch of jellybeans floating around with which you could interact with and drag around. 2013 came the next minor release in Android 4.x family - 4.4 \"KitKat\". You guessed it right, this version's codename and easter egg was inspired by the Nestle KitKat, the chocolate! This release dropped the absolutely black backgrounds and absolutely blue accents. It also introduced support for transparent status bar and the first implementation of \"OK Google\" hotword, although it would work only when you're on home screen or in Google app with screen on. It also debutted its first ever Google Now page which was a feature exclusive to Nexus Launcher (now known as Pixel Launcher) users. Its easter egg would show you the letter \"K\" which would spin randomly as you tap on it, show the Nestle KitKat style \"Android\" text when you long press on it. Though, if you long press on it too, it would bring up the square style screen saver, showing icons for all Android versions ever released so far. Fall 2014 was another breakthrough time for Android, debutting 5.0 codenamed \"Lollipop\" with its all-new design approach known as \"Material Design\". It has been substantially changed over the years but kept the base the same. The whole UI was redesigned, introducing \"heads-up notifications\" that would show important notifications and conversations on top of your screen for a short period of time as they come, notifications on lock screen to surpass requirements to unlock your device to see notifications, swipe-twice quick settings panel, support for LTE (A.K.A. 4G) and many many more. This is also the first release desktop-focused software based on Android would emerge. Though, it introduced lots of bugs along which would be ironed out the next year as well. Its easter egg would show a little circle which would change color and evolve into a lollipop as you tap, with the next \"lollipop\" taking place. Tapping on it for a few more times and then long pressing would bring up a Flappy Bird alike game designed around the Android mascot as the bird and lollipops as pipes as well! Android 6.0 \"Marshmallow\" came along in 2015. Even though it seemed like a minor release, it had lots of things put over Android Lollipop: Now On Tap, a card-based Google Now interface you could access by long pressing on home button, new touch response, all-new Do Not Disturb, app-specific runtime permissions, support for fingerprint sensors, a bit more improved face unlocking in Smart Lock, support for USB-C, paginated QS, etc. It also introduced a hidden API for split screen, although buggy, support for \"System UI Tuner\" that allowed you to change several aspects of the UI. Its easter egg was around the same as Lollipop, except it directly shows the big circle with a special icon presenting the letter \"M\", which would then turn into Android-ified marshmallow and tapping a few more times then long pressing would bring the refreshed Android Flappy Bird that adds support for multiplayer same-screen gaming, allowing up to 6 users to participate on the same device. Android 7.0 \"Nougat\" debutted in 2016 and has gotten even more significate features. Support for 3 rd party tiles in quick settings and introduction of editing the QS, eventually dropping the separate Settings activity for editing those, is one of the most productive ones. It introduced inline reply function for notifications too, allowing you to reply notifications without the need to leave your current app. It also introduced a proper implementation of split screen that you could access by long pressing on recents button. It's also the first Android version to allow debutting of Google Pixel series, starting with Pixel and Pixel XL. It also introduced Google Assistant and the Data Saver feature. Along with those, although less known, it also introduced hamburger menu in Settings, allowing you to jump between Settings menus without the need to go back. Its easter egg would show you a card styled letter \"N\", which would bring up the famous QS-dependent cat game, also named \"Neko\" (\u732b, means \"Cat\" in Japanese) when tapped on multiple times then long pressed. Android 8.0 \"Oreo\" launched in 2017, has tweaked the interface once again, introducing a wallpaper-dependent prototype of dark mode. It also introduced more productivity features such as Always On Display, notification snoozing, quick toggles for specific tiles such as WiFi and mobile data, Project Treble and so GSIs (Generic System Images) that eventually reduce the time OEMs would take to release newer updates, along with a hidden API for two-button navigation and so launcher-dependent recents activity in place of the one introduced in System UI. Google also introduced Android Go for low-end devices, the first implementation of Google Play Protect, the built-in antivirus for Android devices and redesigned emojis along with its event. Its easter egg on 8.0 would show three circles stacked inside each other, which then got replaced with the symbol of Oreo biscuit with Android emblem on top instead of \"OREO\" logo on 8.1. Tappping on it a few times then long pressing would open up another activity that shows a black octopus floating around in the depths of a blue sea, which you could move around by dragging its head. The Android 8.0 commercial titled \"Android Oreo - Open Wonder\", featuring the traditions of the Oreo cookie too. Android 9 \"Pie\" was launched in August 2018, eventually slowly redesigning the interface once again. The volume panel has been made more minimal and moved to sides of screen, depending on where your volume keys are. Android Pie also standardized swipe-up app drawer and made two-button navigation available, a more pleasant battery saver mode, which drops disablement of animations and filling of UI bars with the color orange, dropping expanded QS tiles and introducing Smart Reply. It also had a hidden API for full navigation gestures, although buggy, and is the last Android version to support recents dependent on System UI. Its easter egg would show the letter \"P\" in a stylish way with kind of hypnotizing animation, which in some devices would change color as you tap on it and launch a basic whiteboard activity that you could draw things on. Android 10 \"Q\", the first Android version that didn't have a codename, was launched in September 2019. It brought a ton of new features such as the proper full screen navigation, updating runtime permissions so introducing scoped storage and hidden API for more tweakable location permission, making system-wide dark theme an actual thing and taking it out of being a prototype, a lot deeper system customization by using \"Styles & Wallpapers\", an all-new Focus Mode and on-demand live captions. It also dropped face unlock from Smart Lock, making it a device-specific implementation. Its easter egg would show the text \"android 10\", which you can turn into \"android Q\" then press a few times onto to bring an icon quiz to test how good you are with material design icons. Android 11 \"R\", unofficially codenamed \"Red Velvet Cake\", was launched in September 2020, bringing the first ever proper implementation of home controls right in your power menu. It also brought the first implementation of music controls on quick settings, taking it out of notification panel and native screen recording. Its easter egg is a way more revamped version of Neko that was seen on Android Nougat, which can be triggered by rotating the white dot clockwise until the number \"11\" appears on screen. It got renamed to \"Neko Controls\" internally, although it's named \"Cat Controls\" as the app provider for home controls. Android 12 \"Snow Cone\", launched in October 2021, revamped the interface for the 3 rd time, bringing up a new wallpaper-based design guidelines named \"Material You\", As in its name, \"it's meant to be for you\", as in the system respecting the way you customize it. The interface got bigger elements that's aimed to be more accessible and consistent. It also introduced smooth switch between regular screen on and AOD, eventually reducing unnecessary display power-offs for LCD displays. Its easter egg would show a clock that shows the current time, and rotating the minutes either clockwise or counterclockwise until it's 12:00 then releasing when it's 12:00, it would show the Android 12 icon with lots of differently sized circles resembling a color blindness test. This reveals 2 things at once: The home controls QS tile with Cat Controls being carried over from Android 11, and the Paint Chips widget showing the entire color palette generated from your wallpaper by Android 12's theming engine. Android 13 \"Tiramisu\" was launched in the source code and released to first end-user device in August 2022. It introduced the revamped version of taskbar for tablet devices, and did some little minor tweaks throughout the System UI, just like the upgrade from Android Lollipop to Marshmallow. Its easter egg is about the same with Android 12's, with the only exception being that you have to make the clock show 1:00 instead of 12:00. What is AOSP? \u00b6 AOSP, standing for Android Open Source Project, is Google's approach to make the Android operating system open source without blending in Google's proprietary aspects, eventually letting development for devices in multiple aspects whether if you're just an app developer, OEM or a custom platform developer. Its sources consist of lots of components but can be broken down to a few simple matters. Build system, firstly coded in Make and Ninja then switched to Soong UI and Blueprint. Framework, coded entirely in Java. External components and utilities, adapted for Android and ARM processor. Android packages, the apps that have direct connection with framework. Device sources, combination of Makefiles and packages. Linux kernel, made for a specific device. Vendor proprietary blobs, straight up binaries and Makefiles specifying where to copy or install them. What if you want to contribute to it? \u00b6 The source code is in android Git repositories - Git at Google along with the Issue Tracker being located at Google Issue Tracker (although bloated since a long time). You just do your change, then append Test: tag into your commit message, explaining how did you test the change, then submit to Google by uploading it to review by using repo upload . What is A \"Custom ROM\"? \u00b6 ROM in computer terms means \"Read-Only Memory\". Based on this definition, we, custom software developers, define \"ROM\" as \"software stored in read-only partitions\". A custom ROM is a custom software Android devices store in their usually-read-only partitions such as system , vendor , product . List of Some Well-Known Custom ROMs \u00b6 LineageOS (Father of most of the Android projects) Pixel Experience (Provides Pixel device functionalities to non-Pixel devices) Evolution X (Similar to Pixel Experience, provides way deeper customization) /e/OS (LineageOS modified to be more privacy-aware) GrapheneOS (Pixel-first privacy-aware ROM) ProtonAOSP (Pure AOSP with lots of platform fixes and little customization by a Pixel custom ROM developer) Project Kaleidoscope (Enterprise-degree ROM based on AOSP, partnering with OEMs to bring in a more professional system) Libre Mobile OS Droid (Professional-degree FOSS ROM based on LineageOS developed by a GSI maintainer, making various new features for Android completely opensource and easy to implement on other software) References \u00b6 Base for module: github.com:ucoruh/course-note-sample History: Android versions: A living history from 1.0 to 13 | ComputerWorld","title":"Introduction of AOSP and Its History"},{"location":"week-1/week-1/#introduction-to-aosp","text":"","title":"Introduction to AOSP"},{"location":"week-1/week-1/#week-1-aosp-introduction-and-history","text":"","title":"Week-1 (AOSP Introduction and History)"},{"location":"week-1/week-1/#androids-birth-and-its-development-process","text":"Download DOC , SLIDE , PPTX","title":"Android's Birth and Its Development Process"},{"location":"week-1/week-1/#outline","text":"What is Android and what is it intended for AOSP's birth Custom ROMs and custom device development Android was originally made NOT by Google but an independent company","title":"Outline"},{"location":"week-1/week-1/#what-is-android","text":"When it comes to AOSP, which stands for Android Open Source Project, there are lots of people getting confused by the term even including majority of Android users themselves. So it's required to explain what is Android first. Android is a mobile operating system developed by Google for various platforms such as smartphones, tablet PCs and even laptops. It not only kept itself up to date with today's world, but also is known to always have an open hole for development as per human requests constantly changing. Every few Android versions, Google comes with new design guidelines which are made to both look elegant and stay future-proof. Nowadays, hundreds of thousands of people have been contributing to Android world by either their unique software based on it, contributing to upstream source code, manufacturing their own device with a modified version of it or simply porting it to plenty of devices you would never expect to see! We have even seen Android running on a Nintendo Switch!","title":"What is Android?"},{"location":"week-1/week-1/#history-of-android","text":"Believe it or not, Android was originally intended to be made for digital cameras, developed by a now-acquired-by-Google Android Inc, an American tech company, started development in 2003. Before it could get its public release, it had lots of changes - It got acquired by Google, then rebased on the Linux kernel to be intended to be made for PCs as an OSS (Open Source Software) licensed under Apache 2.0 in 2004. In 2007, after 3 years since getting acquired and rebased by Google, Open Handset Alliance was found to make Android supported by even wider range of devices by providing the core features it now has such as installing 3 rd party apps, wireless networking, etc. In 2008, 1 year after foundation of O.H.A, T-Mobile got the chance to feature this brand new operating system with majority of Google apps built-in: Android 1.0, codenamed \"Astro Boy\". Throughout its development cycle, 4 minor releases (1.1~1.4) have been made in top of 1.0 without any codename changes. In early 2009 was the first ever Android version we most probably know getting released, also making a huge change on Android's codenaming style that we know today: Android 1.5 \"Cupcake\". This release gave the UI some refreshments and lots of optimizations for touch screens as well as the introduction of on-screen keyboard that's the core feature that a smartphone and tablet PC has to offer today. It also introduced 3 rd party widgets, which Apple surely still has a long way off for. After semi-annual development cycle over Android Cupcake came Android Donut, incrementing minor release to 1.6 and getting released in Fall 2009. This release included adaptation to newer set of technologies such as over-the-air adaptation for different screen sizes and CDMA (also known as 3G network) support. Keeping up the pace for development came the 2 nd major version of Android, 2.0 \"Eclair\". This release is the first one to include, hold your horses because this is also something Android first introduced as well, speech-based navigation! As you would drive on road, the navigation would navigate you through towards your destination. It was also packed with introduction of live wallpaper support and speech-to-text, also known as speech dictation, availability. One downside though, it's also the first Android version to get a feature from iOS which made Apple extremely angry: Pinch to zoom. The next minor version, 2.1, didn't increment the codename but only was packed with some platform fixes. Just after 4 months since 2.1 came 2.2, incrementing codename to \"Froyo\". This release included huge amounts of performance improvements as well as standardizing some features such as the well-known dock and speech commands. It wasn't like the Google Assistant we now have though. You could perform only simple tasks such as asking your phone to play some music or taking a note. It was unable to read your notifications or make a joke for you. This release was also packed with support for Shockwave Flash, which Apple resisted to provide in their iOS devices. In 2010 came the next minor release that we all know well, Android 2.3 \"Gingerbread\". In the pure build without any modifications, it had the color green and black seeped all around the user interface. It was also the first Android version to introduce that three-tap easter egg which only had an art of Android and gingerbread in the middle of zombies. Tapping it would create a toast that reads \"Zombie art by Jack Larson\". 2011 was a really weird time for Android, introducing its tablet-focused redesigned user interface with the new design chief \"Matias Duarte\". Being the only completely proprietary major version of Android, 3.0 and 3.1 \"Honeycomb\", Motorola Xoom was the first model to debut it through. It introduced the first implementation of navigation dock that we would see lasting long and also debutted a prototype of Holo design, the combination of the colors blue and black as inspired by space-alike designs. It also introduced the card-like recents UI and the recents button. Previous Android versions would use icon-based \"Task Manager\" just like classic Windows Alt+Tab UI. Its easter egg was a bee with transparent background, posting the toast \"REZZZZZZZ...\" when you tap on it. In a later date, again in 2011, comes Android 4.0 \"Ice Cream Sandwich\". This one made phones and tablets have a single unified UI with its more modern design approch. While it carried over the accent change, navigation dock (which would become navigation bar on phones), card-like recents UI and every other change Honeycomb did. It was pretty buggy and was known to have performance bottlenecks as all new major releases would have. Its easter egg was rather inspired by the well-known Nyan Cat, remaking it for Android and replacing the cat with the Android mascot made in pixelated style and with an ice cream sandwich cage. You would have to keep holding on your screen for it to appear as your phone vibrates stronger and stronger the more the Android grows. If you just tap, it would say \"Android 4.0: Ice Cream Sandwich\" in a toast. The biggest impact to Android was made by 4.1 and 4.2 \"Jelly Bean\", packing lots and lots of improvements inside, released in 2012. It included lots of stability and performance includes over ICS, but also debutted the quick settings for the first time for mobile devices, and multi-user support for tablet PCs. It also packed in the support for widgets directly in lock screen as well as the Google Now feature. It also introduced interactive notifications such as additional functions like reply and mark as read, and expanded capabilities of voice commands. Its easter egg would show you a jellybean that would become the Android mascot's face when tapped on, along with a big custom toast saying \"Android 4.\u00bc.2 JELLY BEAN \". Long pressing on it would show you a screen with bunch of jellybeans floating around with which you could interact with and drag around. 2013 came the next minor release in Android 4.x family - 4.4 \"KitKat\". You guessed it right, this version's codename and easter egg was inspired by the Nestle KitKat, the chocolate! This release dropped the absolutely black backgrounds and absolutely blue accents. It also introduced support for transparent status bar and the first implementation of \"OK Google\" hotword, although it would work only when you're on home screen or in Google app with screen on. It also debutted its first ever Google Now page which was a feature exclusive to Nexus Launcher (now known as Pixel Launcher) users. Its easter egg would show you the letter \"K\" which would spin randomly as you tap on it, show the Nestle KitKat style \"Android\" text when you long press on it. Though, if you long press on it too, it would bring up the square style screen saver, showing icons for all Android versions ever released so far. Fall 2014 was another breakthrough time for Android, debutting 5.0 codenamed \"Lollipop\" with its all-new design approach known as \"Material Design\". It has been substantially changed over the years but kept the base the same. The whole UI was redesigned, introducing \"heads-up notifications\" that would show important notifications and conversations on top of your screen for a short period of time as they come, notifications on lock screen to surpass requirements to unlock your device to see notifications, swipe-twice quick settings panel, support for LTE (A.K.A. 4G) and many many more. This is also the first release desktop-focused software based on Android would emerge. Though, it introduced lots of bugs along which would be ironed out the next year as well. Its easter egg would show a little circle which would change color and evolve into a lollipop as you tap, with the next \"lollipop\" taking place. Tapping on it for a few more times and then long pressing would bring up a Flappy Bird alike game designed around the Android mascot as the bird and lollipops as pipes as well! Android 6.0 \"Marshmallow\" came along in 2015. Even though it seemed like a minor release, it had lots of things put over Android Lollipop: Now On Tap, a card-based Google Now interface you could access by long pressing on home button, new touch response, all-new Do Not Disturb, app-specific runtime permissions, support for fingerprint sensors, a bit more improved face unlocking in Smart Lock, support for USB-C, paginated QS, etc. It also introduced a hidden API for split screen, although buggy, support for \"System UI Tuner\" that allowed you to change several aspects of the UI. Its easter egg was around the same as Lollipop, except it directly shows the big circle with a special icon presenting the letter \"M\", which would then turn into Android-ified marshmallow and tapping a few more times then long pressing would bring the refreshed Android Flappy Bird that adds support for multiplayer same-screen gaming, allowing up to 6 users to participate on the same device. Android 7.0 \"Nougat\" debutted in 2016 and has gotten even more significate features. Support for 3 rd party tiles in quick settings and introduction of editing the QS, eventually dropping the separate Settings activity for editing those, is one of the most productive ones. It introduced inline reply function for notifications too, allowing you to reply notifications without the need to leave your current app. It also introduced a proper implementation of split screen that you could access by long pressing on recents button. It's also the first Android version to allow debutting of Google Pixel series, starting with Pixel and Pixel XL. It also introduced Google Assistant and the Data Saver feature. Along with those, although less known, it also introduced hamburger menu in Settings, allowing you to jump between Settings menus without the need to go back. Its easter egg would show you a card styled letter \"N\", which would bring up the famous QS-dependent cat game, also named \"Neko\" (\u732b, means \"Cat\" in Japanese) when tapped on multiple times then long pressed. Android 8.0 \"Oreo\" launched in 2017, has tweaked the interface once again, introducing a wallpaper-dependent prototype of dark mode. It also introduced more productivity features such as Always On Display, notification snoozing, quick toggles for specific tiles such as WiFi and mobile data, Project Treble and so GSIs (Generic System Images) that eventually reduce the time OEMs would take to release newer updates, along with a hidden API for two-button navigation and so launcher-dependent recents activity in place of the one introduced in System UI. Google also introduced Android Go for low-end devices, the first implementation of Google Play Protect, the built-in antivirus for Android devices and redesigned emojis along with its event. Its easter egg on 8.0 would show three circles stacked inside each other, which then got replaced with the symbol of Oreo biscuit with Android emblem on top instead of \"OREO\" logo on 8.1. Tappping on it a few times then long pressing would open up another activity that shows a black octopus floating around in the depths of a blue sea, which you could move around by dragging its head. The Android 8.0 commercial titled \"Android Oreo - Open Wonder\", featuring the traditions of the Oreo cookie too. Android 9 \"Pie\" was launched in August 2018, eventually slowly redesigning the interface once again. The volume panel has been made more minimal and moved to sides of screen, depending on where your volume keys are. Android Pie also standardized swipe-up app drawer and made two-button navigation available, a more pleasant battery saver mode, which drops disablement of animations and filling of UI bars with the color orange, dropping expanded QS tiles and introducing Smart Reply. It also had a hidden API for full navigation gestures, although buggy, and is the last Android version to support recents dependent on System UI. Its easter egg would show the letter \"P\" in a stylish way with kind of hypnotizing animation, which in some devices would change color as you tap on it and launch a basic whiteboard activity that you could draw things on. Android 10 \"Q\", the first Android version that didn't have a codename, was launched in September 2019. It brought a ton of new features such as the proper full screen navigation, updating runtime permissions so introducing scoped storage and hidden API for more tweakable location permission, making system-wide dark theme an actual thing and taking it out of being a prototype, a lot deeper system customization by using \"Styles & Wallpapers\", an all-new Focus Mode and on-demand live captions. It also dropped face unlock from Smart Lock, making it a device-specific implementation. Its easter egg would show the text \"android 10\", which you can turn into \"android Q\" then press a few times onto to bring an icon quiz to test how good you are with material design icons. Android 11 \"R\", unofficially codenamed \"Red Velvet Cake\", was launched in September 2020, bringing the first ever proper implementation of home controls right in your power menu. It also brought the first implementation of music controls on quick settings, taking it out of notification panel and native screen recording. Its easter egg is a way more revamped version of Neko that was seen on Android Nougat, which can be triggered by rotating the white dot clockwise until the number \"11\" appears on screen. It got renamed to \"Neko Controls\" internally, although it's named \"Cat Controls\" as the app provider for home controls. Android 12 \"Snow Cone\", launched in October 2021, revamped the interface for the 3 rd time, bringing up a new wallpaper-based design guidelines named \"Material You\", As in its name, \"it's meant to be for you\", as in the system respecting the way you customize it. The interface got bigger elements that's aimed to be more accessible and consistent. It also introduced smooth switch between regular screen on and AOD, eventually reducing unnecessary display power-offs for LCD displays. Its easter egg would show a clock that shows the current time, and rotating the minutes either clockwise or counterclockwise until it's 12:00 then releasing when it's 12:00, it would show the Android 12 icon with lots of differently sized circles resembling a color blindness test. This reveals 2 things at once: The home controls QS tile with Cat Controls being carried over from Android 11, and the Paint Chips widget showing the entire color palette generated from your wallpaper by Android 12's theming engine. Android 13 \"Tiramisu\" was launched in the source code and released to first end-user device in August 2022. It introduced the revamped version of taskbar for tablet devices, and did some little minor tweaks throughout the System UI, just like the upgrade from Android Lollipop to Marshmallow. Its easter egg is about the same with Android 12's, with the only exception being that you have to make the clock show 1:00 instead of 12:00.","title":"History of Android"},{"location":"week-1/week-1/#what-is-aosp","text":"AOSP, standing for Android Open Source Project, is Google's approach to make the Android operating system open source without blending in Google's proprietary aspects, eventually letting development for devices in multiple aspects whether if you're just an app developer, OEM or a custom platform developer. Its sources consist of lots of components but can be broken down to a few simple matters. Build system, firstly coded in Make and Ninja then switched to Soong UI and Blueprint. Framework, coded entirely in Java. External components and utilities, adapted for Android and ARM processor. Android packages, the apps that have direct connection with framework. Device sources, combination of Makefiles and packages. Linux kernel, made for a specific device. Vendor proprietary blobs, straight up binaries and Makefiles specifying where to copy or install them.","title":"What is AOSP?"},{"location":"week-1/week-1/#what-if-you-want-to-contribute-to-it","text":"The source code is in android Git repositories - Git at Google along with the Issue Tracker being located at Google Issue Tracker (although bloated since a long time). You just do your change, then append Test: tag into your commit message, explaining how did you test the change, then submit to Google by uploading it to review by using repo upload .","title":"What if you want to contribute to it?"},{"location":"week-1/week-1/#what-is-a-custom-rom","text":"ROM in computer terms means \"Read-Only Memory\". Based on this definition, we, custom software developers, define \"ROM\" as \"software stored in read-only partitions\". A custom ROM is a custom software Android devices store in their usually-read-only partitions such as system , vendor , product .","title":"What is A \"Custom ROM\"?"},{"location":"week-1/week-1/#list-of-some-well-known-custom-roms","text":"LineageOS (Father of most of the Android projects) Pixel Experience (Provides Pixel device functionalities to non-Pixel devices) Evolution X (Similar to Pixel Experience, provides way deeper customization) /e/OS (LineageOS modified to be more privacy-aware) GrapheneOS (Pixel-first privacy-aware ROM) ProtonAOSP (Pure AOSP with lots of platform fixes and little customization by a Pixel custom ROM developer) Project Kaleidoscope (Enterprise-degree ROM based on AOSP, partnering with OEMs to bring in a more professional system) Libre Mobile OS Droid (Professional-degree FOSS ROM based on LineageOS developed by a GSI maintainer, making various new features for Android completely opensource and easy to implement on other software)","title":"List of Some Well-Known Custom ROMs"},{"location":"week-1/week-1/#references","text":"Base for module: github.com:ucoruh/course-note-sample History: Android versions: A living history from 1.0 to 13 | ComputerWorld","title":"References"},{"location":"week-2/week-2/","text":"Introduction to AOSP \u00b6 Week-2 (Preparing to Build and Building AOSP) \u00b6 Installing Required Packages, Getting the Source and Building \u00b6 Download DOC , SLIDE , PPTX Outline \u00b6 Gathering maximum set of packages and configuration required for a proper AOSP build Installing binaries that aren't usually present on distro repositories Basics of repo tool Gathering a custom ROM (LineageOS) source and building it for your device Preparing to Build \u00b6 Of course before we can build this piece of wonderful software named AOSP, we need to first gather a huge set of packages we need to install. Many distributions have different guides about this on their documentations. However, Google supports Debian-based ones strictly. Also keep in mind that ANY KINDS OF SUBSYSTEMS LIKE WSL WILL NOT WORK! You will STRICTLY need a buffed VM with Linux on it or a Linux installation on your own PC as AOSP notes - \"You must use Linux; building under either MacOS or Windows isn't supported\". Cloud VMs also work but might make things like file transfer hard depending on your Internet connection and availability. Now, let's come to package installations. Simply put, this command will install all the tools you might need on various distributions of Android singlehandedly (except the repo tool, we'll install this discretely). Most of these are already present on Android source documentation. sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig xmlstarlet python3 python-is-python3 repo Tool \u00b6 repo is a CLI tool developed by Google in Python to provide an easy way to clone all repositories to build something from source. It works in manifest basis and has 2 different manifest handlers: \"Upstream manifest\" and \"Local manifest\" Upstream manifest is an entire Git repo including the default manifest as well as all other linked manifests needed to clone all repositories needed for a distribution to be built. The common tree convention is that there's a README providing little oversight on how to gather the sources (and sometimes how to build it too), a default.xml file that has core repositories from upstream AOSP and <include /> tags to include more manifests in the same repository, a snippets folder that includes additional manifests that do the modifications over the AOSP manifest by <remove-project /> and other tags processed by repo tool, and sometimes assets folder that includes all other assets for the README. You initialize your local directory with it. Local manifest on contrary is a single manifest-ie that has additional and/or device-specific repository modifications that aren't usually provided by upstream manifest. You place these into .repo/local_manifests in your local directory after initializing upstream manifest. Pretty much same tags and parameters are processed by repo tool and appended into the generated manifest that can be viewed by repo manifest . Installing repo \u00b6 Since this piece of tool doesn't exist on all Linux distros or otherwise usually outdated, Google provides us a generic piece of commands to install it manually. These usually tear down into this little script; export REPO = $( mktemp /tmp/repo.XXXXXXXXX ) curl -o ${ REPO } https://storage.googleapis.com/git-repo-downloads/repo gpg --recv-key 8BB9AD793E8E6153AF0F9A4416530D5E920F5C65 curl -s https://storage.googleapis.com/git-repo-downloads/repo.asc | gpg --verify - ${ REPO } && sudo install -m 755 ${ REPO } /bin/repo This first downloads the binary from Google API server, verifies it by checking against Google's key and then globally installs it. Initializing repository \u00b6 repo init is the one we need for this part. The parameters we must pass are -u <url> and -b <branch or tag> . To get these informations, pretty much all ROMs have a repository that has one of these names which you should check around: android , android_manifest , manifest , platform_manifest There are also some parameters that will disable some checks or otherwise minimize the source size by trimming out branches, Git history and such. The command I personally use when initializing a repository is like this; repo init -u https://github.com/LineageOS/android -b lineage-19.1 --depth = 1 --no-tags --no-clone-bundle --current-branch --config-name This initializes repositories for an Android distribution named LineageOS, which is what we use when we need an Android distribution that doesn't ship Google apps and is easy to maintain unofficially. The extra parameters can be torn down to this; Initializes lineage-19.1 branch. Clones only single revision of all repositories - Shallow repository, no history is generated. Doesn't clone tags. This is useful when you have nothing to do with tags opened on repositories. Doesn't use clone bundles, kind of saves storage space. Clones only the branch specified in the manifest instead of all branches. Allows user to configure their name and email when initializing repo instead of using the one in global Git configuration. Once the repository is initialized, we'll also need to clone repositories that are made for your own device. These repositories are usually just device/brand/codename , kernel/brand/chipset and vendor/brand . For example, I'll be building this for Redmi Note 10S, which has the codename of rosemary . If you want to learn yours, you can search over GitHub with your device brand and model. Getting All Repositories for Building \u00b6 Now that we're set up, all we need to do is a single command to sync everything up, which might take too long depending on your Internet connection speed; repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j $( nproc --all ) This command can be torn down to this; Clones only current branch. Doesn't use clone bundles. Doesn't clone tags. Optimizes fetching by using different methods. Prunes the repositories that have been removed after changing something in manifest. Forcefully syncs. This means that if remote for a repository has been changed in manifest, it first removes the old repository and clones the new one. Uses number of threads reported by the distribution to be available for syncing process. If you replace $(nproc --all) with a fixed number like 4, it will use that amount of threads instead. Build Process \u00b6 Android build system uses multiple build processes at single command at once. Simply put, it uses these languages in its build system alone; Make Java Go Bazel Blueprint Rust Pesto Python During the build, other functions and tools like GCC might be invoked when necessary as well. Before starting to build, we need to ensure our device sources are adapted to Lineage's ones. This piece of command batch will do it all for you, presuming you've used the previously given manifest. cd device/redmi/rosemary rename 's/kscope/lineage/' kscope* sed -i 's/kscope/lineage/' AndroidProducts.mk lineage_* You might also need to do some manual edits like overlay adaptations and vendor configuration file path, which won't be covered here. Setting Up Current Session for Building Process \u00b6 Google gives us a nice script inside build folder named envsetup.sh . This defines and some checks prior any kinds of build process. Trying to invoke make without first sourcing will give you an output like this and abort; build/make/core/main.mk:2: Calling make directly is no longer supported. build/make/core/main.mk:3: Either use 'envsetup.sh; m' or 'build/soong/soong_ui.bash --make-mode' build/make/core/main.mk:4: *** done. Stop. This is because Make takes advantage of functions defined by EnvSetup and behaves accordingly. So let's source it first for preparing our current shell session; source build/envsetup.sh Use of lunch \u00b6 lunch is a function to simply set up variables defined by your device sources and platform right away. It can be invoked simply by giving it as a command, it will then give you a list of \"product combos\" that you can choose from. $ lunch You're building on Linux Lunch menu... pick a combo: 1. aosp_arm-eng 2. aosp_arm64-eng 3. aosp_car_arm-userdebug 4. aosp_car_arm64-userdebug 5. aosp_car_x86-userdebug 6. aosp_car_x86_64-userdebug 7. aosp_cf_arm64_auto-userdebug 8. aosp_cf_arm64_phone-userdebug 9. aosp_cf_x86_64_foldable-userdebug 10. aosp_cf_x86_64_pc-userdebug 11. aosp_cf_x86_64_phone-userdebug 12. aosp_cf_x86_64_tv-userdebug 13. aosp_cf_x86_auto-userdebug 14. aosp_cf_x86_phone-userdebug 15. aosp_cf_x86_tv-userdebug 16. aosp_x86-eng 17. aosp_x86_64-eng 18. arm_krait-eng 19. arm_v7_v8-eng 20. armv8-eng 21. armv8_cortex_a55-eng 22. armv8_kryo385-eng 23. car_ui_portrait-userdebug 24. car_x86_64-userdebug 25. gsi_car_arm64-userdebug 26. gsi_car_x86_64-userdebug 27. lineage_rosemary-eng 28. lineage_rosemary-user 29. lineage_rosemary-userdebug 30. qemu_trusty_arm64-userdebug 31. sdk_car_arm-userdebug 32. sdk_car_arm64-userdebug 33. sdk_car_portrait_x86_64-userdebug 34. sdk_car_x86-userdebug 35. sdk_car_x86_64-userdebug 36. silvermont-eng 37. uml-userdebug Which would you like? [aosp_arm-eng] Different Ways to Start Building \u00b6 Unlike all other software, AOSP has different ways to trigger building, the most commonly used are m and make . However, LineageOS also provides additional functions like mka and brunch . These all do the same and invoke $(gettop)/build/soong/soong_ui.bash --build-mode --all-modules --dir=\"$(pwd)\" command for build process. What soong_ui.bash does is that it first compiles soong_ui in Go, then invokes the compiled binary with the parameter given in the end, starting the actual build process. Keep in mind though, building AOSP is pretty heavy on system resources so you might want to leave your system aside until it finishes compiling. To start building as a \"flashable ZIP\", just invoke m bacon as direct m will instead build just images and leave the flashing work onto you - You'll need to flash all images by yourself if there's nothing to handle that automatically, which only Google Pixel devices usually do. References \u00b6 Required packages: Establishing a Build Environment | Android Open Source Project Installation of repo tool: Source Control Tools - Repo | Android Open Source Project","title":"Sources and Compilation Steps"},{"location":"week-2/week-2/#introduction-to-aosp","text":"","title":"Introduction to AOSP"},{"location":"week-2/week-2/#week-2-preparing-to-build-and-building-aosp","text":"","title":"Week-2 (Preparing to Build and Building AOSP)"},{"location":"week-2/week-2/#installing-required-packages-getting-the-source-and-building","text":"Download DOC , SLIDE , PPTX","title":"Installing Required Packages, Getting the Source and Building"},{"location":"week-2/week-2/#outline","text":"Gathering maximum set of packages and configuration required for a proper AOSP build Installing binaries that aren't usually present on distro repositories Basics of repo tool Gathering a custom ROM (LineageOS) source and building it for your device","title":"Outline"},{"location":"week-2/week-2/#preparing-to-build","text":"Of course before we can build this piece of wonderful software named AOSP, we need to first gather a huge set of packages we need to install. Many distributions have different guides about this on their documentations. However, Google supports Debian-based ones strictly. Also keep in mind that ANY KINDS OF SUBSYSTEMS LIKE WSL WILL NOT WORK! You will STRICTLY need a buffed VM with Linux on it or a Linux installation on your own PC as AOSP notes - \"You must use Linux; building under either MacOS or Windows isn't supported\". Cloud VMs also work but might make things like file transfer hard depending on your Internet connection and availability. Now, let's come to package installations. Simply put, this command will install all the tools you might need on various distributions of Android singlehandedly (except the repo tool, we'll install this discretely). Most of these are already present on Android source documentation. sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig xmlstarlet python3 python-is-python3","title":"Preparing to Build"},{"location":"week-2/week-2/#repo-tool","text":"repo is a CLI tool developed by Google in Python to provide an easy way to clone all repositories to build something from source. It works in manifest basis and has 2 different manifest handlers: \"Upstream manifest\" and \"Local manifest\" Upstream manifest is an entire Git repo including the default manifest as well as all other linked manifests needed to clone all repositories needed for a distribution to be built. The common tree convention is that there's a README providing little oversight on how to gather the sources (and sometimes how to build it too), a default.xml file that has core repositories from upstream AOSP and <include /> tags to include more manifests in the same repository, a snippets folder that includes additional manifests that do the modifications over the AOSP manifest by <remove-project /> and other tags processed by repo tool, and sometimes assets folder that includes all other assets for the README. You initialize your local directory with it. Local manifest on contrary is a single manifest-ie that has additional and/or device-specific repository modifications that aren't usually provided by upstream manifest. You place these into .repo/local_manifests in your local directory after initializing upstream manifest. Pretty much same tags and parameters are processed by repo tool and appended into the generated manifest that can be viewed by repo manifest .","title":"repo Tool"},{"location":"week-2/week-2/#installing-repo","text":"Since this piece of tool doesn't exist on all Linux distros or otherwise usually outdated, Google provides us a generic piece of commands to install it manually. These usually tear down into this little script; export REPO = $( mktemp /tmp/repo.XXXXXXXXX ) curl -o ${ REPO } https://storage.googleapis.com/git-repo-downloads/repo gpg --recv-key 8BB9AD793E8E6153AF0F9A4416530D5E920F5C65 curl -s https://storage.googleapis.com/git-repo-downloads/repo.asc | gpg --verify - ${ REPO } && sudo install -m 755 ${ REPO } /bin/repo This first downloads the binary from Google API server, verifies it by checking against Google's key and then globally installs it.","title":"Installing repo"},{"location":"week-2/week-2/#initializing-repository","text":"repo init is the one we need for this part. The parameters we must pass are -u <url> and -b <branch or tag> . To get these informations, pretty much all ROMs have a repository that has one of these names which you should check around: android , android_manifest , manifest , platform_manifest There are also some parameters that will disable some checks or otherwise minimize the source size by trimming out branches, Git history and such. The command I personally use when initializing a repository is like this; repo init -u https://github.com/LineageOS/android -b lineage-19.1 --depth = 1 --no-tags --no-clone-bundle --current-branch --config-name This initializes repositories for an Android distribution named LineageOS, which is what we use when we need an Android distribution that doesn't ship Google apps and is easy to maintain unofficially. The extra parameters can be torn down to this; Initializes lineage-19.1 branch. Clones only single revision of all repositories - Shallow repository, no history is generated. Doesn't clone tags. This is useful when you have nothing to do with tags opened on repositories. Doesn't use clone bundles, kind of saves storage space. Clones only the branch specified in the manifest instead of all branches. Allows user to configure their name and email when initializing repo instead of using the one in global Git configuration. Once the repository is initialized, we'll also need to clone repositories that are made for your own device. These repositories are usually just device/brand/codename , kernel/brand/chipset and vendor/brand . For example, I'll be building this for Redmi Note 10S, which has the codename of rosemary . If you want to learn yours, you can search over GitHub with your device brand and model.","title":"Initializing repository"},{"location":"week-2/week-2/#getting-all-repositories-for-building","text":"Now that we're set up, all we need to do is a single command to sync everything up, which might take too long depending on your Internet connection speed; repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j $( nproc --all ) This command can be torn down to this; Clones only current branch. Doesn't use clone bundles. Doesn't clone tags. Optimizes fetching by using different methods. Prunes the repositories that have been removed after changing something in manifest. Forcefully syncs. This means that if remote for a repository has been changed in manifest, it first removes the old repository and clones the new one. Uses number of threads reported by the distribution to be available for syncing process. If you replace $(nproc --all) with a fixed number like 4, it will use that amount of threads instead.","title":"Getting All Repositories for Building"},{"location":"week-2/week-2/#build-process","text":"Android build system uses multiple build processes at single command at once. Simply put, it uses these languages in its build system alone; Make Java Go Bazel Blueprint Rust Pesto Python During the build, other functions and tools like GCC might be invoked when necessary as well. Before starting to build, we need to ensure our device sources are adapted to Lineage's ones. This piece of command batch will do it all for you, presuming you've used the previously given manifest. cd device/redmi/rosemary rename 's/kscope/lineage/' kscope* sed -i 's/kscope/lineage/' AndroidProducts.mk lineage_* You might also need to do some manual edits like overlay adaptations and vendor configuration file path, which won't be covered here.","title":"Build Process"},{"location":"week-2/week-2/#setting-up-current-session-for-building-process","text":"Google gives us a nice script inside build folder named envsetup.sh . This defines and some checks prior any kinds of build process. Trying to invoke make without first sourcing will give you an output like this and abort; build/make/core/main.mk:2: Calling make directly is no longer supported. build/make/core/main.mk:3: Either use 'envsetup.sh; m' or 'build/soong/soong_ui.bash --make-mode' build/make/core/main.mk:4: *** done. Stop. This is because Make takes advantage of functions defined by EnvSetup and behaves accordingly. So let's source it first for preparing our current shell session; source build/envsetup.sh","title":"Setting Up Current Session for Building Process"},{"location":"week-2/week-2/#use-of-lunch","text":"lunch is a function to simply set up variables defined by your device sources and platform right away. It can be invoked simply by giving it as a command, it will then give you a list of \"product combos\" that you can choose from. $ lunch You're building on Linux Lunch menu... pick a combo: 1. aosp_arm-eng 2. aosp_arm64-eng 3. aosp_car_arm-userdebug 4. aosp_car_arm64-userdebug 5. aosp_car_x86-userdebug 6. aosp_car_x86_64-userdebug 7. aosp_cf_arm64_auto-userdebug 8. aosp_cf_arm64_phone-userdebug 9. aosp_cf_x86_64_foldable-userdebug 10. aosp_cf_x86_64_pc-userdebug 11. aosp_cf_x86_64_phone-userdebug 12. aosp_cf_x86_64_tv-userdebug 13. aosp_cf_x86_auto-userdebug 14. aosp_cf_x86_phone-userdebug 15. aosp_cf_x86_tv-userdebug 16. aosp_x86-eng 17. aosp_x86_64-eng 18. arm_krait-eng 19. arm_v7_v8-eng 20. armv8-eng 21. armv8_cortex_a55-eng 22. armv8_kryo385-eng 23. car_ui_portrait-userdebug 24. car_x86_64-userdebug 25. gsi_car_arm64-userdebug 26. gsi_car_x86_64-userdebug 27. lineage_rosemary-eng 28. lineage_rosemary-user 29. lineage_rosemary-userdebug 30. qemu_trusty_arm64-userdebug 31. sdk_car_arm-userdebug 32. sdk_car_arm64-userdebug 33. sdk_car_portrait_x86_64-userdebug 34. sdk_car_x86-userdebug 35. sdk_car_x86_64-userdebug 36. silvermont-eng 37. uml-userdebug Which would you like? [aosp_arm-eng]","title":"Use of lunch"},{"location":"week-2/week-2/#different-ways-to-start-building","text":"Unlike all other software, AOSP has different ways to trigger building, the most commonly used are m and make . However, LineageOS also provides additional functions like mka and brunch . These all do the same and invoke $(gettop)/build/soong/soong_ui.bash --build-mode --all-modules --dir=\"$(pwd)\" command for build process. What soong_ui.bash does is that it first compiles soong_ui in Go, then invokes the compiled binary with the parameter given in the end, starting the actual build process. Keep in mind though, building AOSP is pretty heavy on system resources so you might want to leave your system aside until it finishes compiling. To start building as a \"flashable ZIP\", just invoke m bacon as direct m will instead build just images and leave the flashing work onto you - You'll need to flash all images by yourself if there's nothing to handle that automatically, which only Google Pixel devices usually do.","title":"Different Ways to Start Building"},{"location":"week-2/week-2/#references","text":"Required packages: Establishing a Build Environment | Android Open Source Project Installation of repo tool: Source Control Tools - Repo | Android Open Source Project","title":"References"}]}